
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800788c  0800788c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800788c  0800788c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800788c  0800788c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001aec  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001afc  20001afc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c7f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030af  00000000  00000000  00039cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002e07  00000000  00000000  0003f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193e2  00000000  00000000  000423ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8c52  00000000  00000000  0005b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124433  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005860  00000000  00000000  00124484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007760 	.word	0x08007760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007760 	.word	0x08007760

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fcb2 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f848 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 fa50 	bl	8000680 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001e0:	f000 f8a4 	bl	800032c <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e4:	f000 f912 	bl	800040c <MX_ADC2_Init>
  MX_TIM1_Init();
 80001e8:	f000 f96e 	bl	80004c8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80001ec:	f000 fa18 	bl	8000620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f0:	f004 fd32 	bl	8004c58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hChargeProcessT */
  hChargeProcessTHandle = osThreadNew(ChargeProcessTask, NULL, &hChargeProcessT_attributes);
 80001f4:	4a11      	ldr	r2, [pc, #68]	; (800023c <main+0x6c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4811      	ldr	r0, [pc, #68]	; (8000240 <main+0x70>)
 80001fa:	f004 fd95 	bl	8004d28 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a10      	ldr	r2, [pc, #64]	; (8000244 <main+0x74>)
 8000202:	6013      	str	r3, [r2, #0]

  /* creation of hStatusTask */
  hStatusTaskHandle = osThreadNew(StatusTask, NULL, &hStatusTask_attributes);
 8000204:	4a10      	ldr	r2, [pc, #64]	; (8000248 <main+0x78>)
 8000206:	2100      	movs	r1, #0
 8000208:	4810      	ldr	r0, [pc, #64]	; (800024c <main+0x7c>)
 800020a:	f004 fd8d 	bl	8004d28 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a0f      	ldr	r2, [pc, #60]	; (8000250 <main+0x80>)
 8000212:	6013      	str	r3, [r2, #0]

  /* creation of hReadCpTask */
  hReadCpTaskHandle = osThreadNew(ReadCpTask, NULL, &hReadCpTask_attributes);
 8000214:	4a0f      	ldr	r2, [pc, #60]	; (8000254 <main+0x84>)
 8000216:	2100      	movs	r1, #0
 8000218:	480f      	ldr	r0, [pc, #60]	; (8000258 <main+0x88>)
 800021a:	f004 fd85 	bl	8004d28 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a0e      	ldr	r2, [pc, #56]	; (800025c <main+0x8c>)
 8000222:	6013      	str	r3, [r2, #0]

  /* creation of hModbusTask */
  hModbusTaskHandle = osThreadNew(ModbusTask, NULL, &hModbusTask_attributes);
 8000224:	4a0e      	ldr	r2, [pc, #56]	; (8000260 <main+0x90>)
 8000226:	2100      	movs	r1, #0
 8000228:	480e      	ldr	r0, [pc, #56]	; (8000264 <main+0x94>)
 800022a:	f004 fd7d 	bl	8004d28 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <main+0x98>)
 8000232:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000234:	f004 fd44 	bl	8004cc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x68>
 800023a:	bf00      	nop
 800023c:	080077c4 	.word	0x080077c4
 8000240:	080007b1 	.word	0x080007b1
 8000244:	2000019c 	.word	0x2000019c
 8000248:	080077e8 	.word	0x080077e8
 800024c:	080007c1 	.word	0x080007c1
 8000250:	200001a0 	.word	0x200001a0
 8000254:	0800780c 	.word	0x0800780c
 8000258:	080007d1 	.word	0x080007d1
 800025c:	200001a4 	.word	0x200001a4
 8000260:	08007830 	.word	0x08007830
 8000264:	080007e1 	.word	0x080007e1
 8000268:	200001a8 	.word	0x200001a8

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b09e      	sub	sp, #120	; 0x78
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000276:	2228      	movs	r2, #40	; 0x28
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f007 fa68 	bl	8007750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]
 800028c:	60da      	str	r2, [r3, #12]
 800028e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000290:	463b      	mov	r3, r7
 8000292:	223c      	movs	r2, #60	; 0x3c
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f007 fa5a 	bl	8007750 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029c:	2301      	movs	r3, #1
 800029e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fd3c 	bl	8001d40 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ce:	f000 fa8f 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fd64 	bl	8002dbc <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002fa:	f000 fa79 	bl	80007f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 80002fe:	f241 0382 	movw	r3, #4226	; 0x1082
 8000302:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800030c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800030e:	2300      	movs	r3, #0
 8000310:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	463b      	mov	r3, r7
 8000314:	4618      	mov	r0, r3
 8000316:	f002 ff87 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000320:	f000 fa66 	bl	80007f0 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3778      	adds	r7, #120	; 0x78
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000332:	f107 031c 	add.w	r3, r7, #28
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
 800034c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800034e:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000354:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000356:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000358:	2200      	movs	r2, #0
 800035a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800035c:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <MX_ADC1_Init+0xdc>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000362:	4b29      	ldr	r3, [pc, #164]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000368:	4b27      	ldr	r3, [pc, #156]	; (8000408 <MX_ADC1_Init+0xdc>)
 800036a:	2200      	movs	r2, #0
 800036c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036e:	4b26      	ldr	r3, [pc, #152]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000370:	2200      	movs	r2, #0
 8000372:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000376:	4b24      	ldr	r3, [pc, #144]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000378:	2200      	movs	r2, #0
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037c:	4b22      	ldr	r3, [pc, #136]	; (8000408 <MX_ADC1_Init+0xdc>)
 800037e:	2201      	movs	r2, #1
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000382:	4b21      	ldr	r3, [pc, #132]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <MX_ADC1_Init+0xdc>)
 800038a:	2201      	movs	r2, #1
 800038c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MX_ADC1_Init+0xdc>)
 8000398:	2204      	movs	r2, #4
 800039a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_ADC1_Init+0xdc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <MX_ADC1_Init+0xdc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a8:	4817      	ldr	r0, [pc, #92]	; (8000408 <MX_ADC1_Init+0xdc>)
 80003aa:	f000 fc2d 	bl	8000c08 <HAL_ADC_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003b4:	f000 fa1c 	bl	80007f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003bc:	f107 031c 	add.w	r3, r7, #28
 80003c0:	4619      	mov	r1, r3
 80003c2:	4811      	ldr	r0, [pc, #68]	; (8000408 <MX_ADC1_Init+0xdc>)
 80003c4:	f001 f8ec 	bl	80015a0 <HAL_ADCEx_MultiModeConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ce:	f000 fa0f 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4619      	mov	r1, r3
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <MX_ADC1_Init+0xdc>)
 80003f0:	f000 fdea 	bl	8000fc8 <HAL_ADC_ConfigChannel>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003fa:	f000 f9f9 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	3728      	adds	r7, #40	; 0x28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000002c 	.word	0x2000002c

0800040c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000412:	463b      	mov	r3, r7
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
 8000420:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000422:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000424:	4a27      	ldr	r2, [pc, #156]	; (80004c4 <MX_ADC2_Init+0xb8>)
 8000426:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000428:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_ADC2_Init+0xb4>)
 800042a:	2200      	movs	r2, #0
 800042c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800042e:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000434:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <MX_ADC2_Init+0xb4>)
 800043c:	2200      	movs	r2, #0
 800043e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000440:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000442:	2200      	movs	r2, #0
 8000444:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_ADC2_Init+0xb4>)
 800044a:	2200      	movs	r2, #0
 800044c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000450:	2201      	movs	r2, #1
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <MX_ADC2_Init+0xb4>)
 800045c:	2201      	movs	r2, #1
 800045e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000462:	2200      	movs	r2, #0
 8000464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <MX_ADC2_Init+0xb4>)
 800046a:	2204      	movs	r2, #4
 800046c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000470:	2200      	movs	r2, #0
 8000472:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_ADC2_Init+0xb4>)
 8000476:	2200      	movs	r2, #0
 8000478:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800047a:	4811      	ldr	r0, [pc, #68]	; (80004c0 <MX_ADC2_Init+0xb4>)
 800047c:	f000 fbc4 	bl	8000c08 <HAL_ADC_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000486:	f000 f9b3 	bl	80007f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800048a:	2301      	movs	r3, #1
 800048c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048e:	2301      	movs	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004a2:	463b      	mov	r3, r7
 80004a4:	4619      	mov	r1, r3
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <MX_ADC2_Init+0xb4>)
 80004a8:	f000 fd8e 	bl	8000fc8 <HAL_ADC_ConfigChannel>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80004b2:	f000 f99d 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000007c 	.word	0x2000007c
 80004c4:	50000100 	.word	0x50000100

080004c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09a      	sub	sp, #104	; 0x68
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
 80004f8:	615a      	str	r2, [r3, #20]
 80004fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	222c      	movs	r2, #44	; 0x2c
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 f924 	bl	8007750 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000508:	4b43      	ldr	r3, [pc, #268]	; (8000618 <MX_TIM1_Init+0x150>)
 800050a:	4a44      	ldr	r2, [pc, #272]	; (800061c <MX_TIM1_Init+0x154>)
 800050c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800050e:	4b42      	ldr	r3, [pc, #264]	; (8000618 <MX_TIM1_Init+0x150>)
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b40      	ldr	r3, [pc, #256]	; (8000618 <MX_TIM1_Init+0x150>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800051a:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <MX_TIM1_Init+0x150>)
 800051c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000520:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000522:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <MX_TIM1_Init+0x150>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000528:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <MX_TIM1_Init+0x150>)
 800052a:	2200      	movs	r2, #0
 800052c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052e:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <MX_TIM1_Init+0x150>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000534:	4838      	ldr	r0, [pc, #224]	; (8000618 <MX_TIM1_Init+0x150>)
 8000536:	f003 f827 	bl	8003588 <HAL_TIM_Base_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000540:	f000 f956 	bl	80007f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000548:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800054a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800054e:	4619      	mov	r1, r3
 8000550:	4831      	ldr	r0, [pc, #196]	; (8000618 <MX_TIM1_Init+0x150>)
 8000552:	f003 f9e5 	bl	8003920 <HAL_TIM_ConfigClockSource>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800055c:	f000 f948 	bl	80007f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000560:	482d      	ldr	r0, [pc, #180]	; (8000618 <MX_TIM1_Init+0x150>)
 8000562:	f003 f868 	bl	8003636 <HAL_TIM_PWM_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800056c:	f000 f940 	bl	80007f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000570:	2300      	movs	r3, #0
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000574:	2300      	movs	r3, #0
 8000576:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000580:	4619      	mov	r1, r3
 8000582:	4825      	ldr	r0, [pc, #148]	; (8000618 <MX_TIM1_Init+0x150>)
 8000584:	f003 fe96 	bl	80042b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800058e:	f000 f92f 	bl	80007f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000592:	2360      	movs	r3, #96	; 0x60
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800059a:	2300      	movs	r3, #0
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800059e:	2300      	movs	r3, #0
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005a6:	2300      	movs	r3, #0
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005b2:	2200      	movs	r2, #0
 80005b4:	4619      	mov	r1, r3
 80005b6:	4818      	ldr	r0, [pc, #96]	; (8000618 <MX_TIM1_Init+0x150>)
 80005b8:	f003 f89e 	bl	80036f8 <HAL_TIM_PWM_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80005c2:	f000 f915 	bl	80007f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4807      	ldr	r0, [pc, #28]	; (8000618 <MX_TIM1_Init+0x150>)
 80005fc:	f003 feda 	bl	80043b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000606:	f000 f8f3 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <MX_TIM1_Init+0x150>)
 800060c:	f000 f9bc 	bl	8000988 <HAL_TIM_MspPostInit>

}
 8000610:	bf00      	nop
 8000612:	3768      	adds	r7, #104	; 0x68
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000cc 	.word	0x200000cc
 800061c:	40012c00 	.word	0x40012c00

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART2_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800062c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000664:	f003 ff24 	bl	80044b0 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 f8bf 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000118 	.word	0x20000118
 800067c:	40004400 	.word	0x40004400

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <MX_GPIO_Init+0x124>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a42      	ldr	r2, [pc, #264]	; (80007a4 <MX_GPIO_Init+0x124>)
 800069c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ae:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a3c      	ldr	r2, [pc, #240]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a36      	ldr	r2, [pc, #216]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a30      	ldr	r2, [pc, #192]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0x124>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_Pin|CHG_Pin|ERR_Pin|PP_Pin
 80006f6:	2200      	movs	r2, #0
 80006f8:	f249 21e2 	movw	r1, #37602	; 0x92e2
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f001 fb06 	bl	8001d10 <HAL_GPIO_WritePin>
                          |RS485_TERM_Pin|RCD_Test_Pin|CON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LO_Pin|CC_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2130      	movs	r1, #48	; 0x30
 8000708:	4827      	ldr	r0, [pc, #156]	; (80007a8 <MX_GPIO_Init+0x128>)
 800070a:	f001 fb01 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800070e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4822      	ldr	r0, [pc, #136]	; (80007ac <MX_GPIO_Init+0x12c>)
 8000724:	f001 f97a 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_Pin CHG_Pin ERR_Pin PP_Pin
                           RS485_TERM_Pin RCD_Test_Pin CON_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin|CHG_Pin|ERR_Pin|PP_Pin
 8000728:	f249 23e2 	movw	r3, #37602	; 0x92e2
 800072c:	617b      	str	r3, [r7, #20]
                          |RS485_TERM_Pin|RCD_Test_Pin|CON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f001 f96a 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Current1_Pin Current2_Pin Current4_Pin DIP_SW3_Pin
                           DIP_SW4_Pin DIP_SW5_Pin DIP_SW6_Pin DIP_SW7_Pin
                           DIP_SW8_Pin Current8_Pin CCR_Pin LD_Pin
                           DIP_SW1_Pin DIP_SW2_Pin */
  GPIO_InitStruct.Pin = Current1_Pin|Current2_Pin|Current4_Pin|DIP_SW3_Pin
 8000748:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 800074c:	617b      	str	r3, [r7, #20]
                          |DIP_SW4_Pin|DIP_SW5_Pin|DIP_SW6_Pin|DIP_SW7_Pin
                          |DIP_SW8_Pin|Current8_Pin|CCR_Pin|LD_Pin
                          |DIP_SW1_Pin|DIP_SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x128>)
 800075e:	f001 f95d 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin RCD_Failure_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RCD_Failure_Pin;
 8000762:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f001 f94f 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LO_Pin CC_Pin */
  GPIO_InitStruct.Pin = LO_Pin|CC_Pin;
 800077e:	2330      	movs	r3, #48	; 0x30
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0x128>)
 8000796:	f001 f941 	bl	8001a1c <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48000800 	.word	0x48000800

080007b0 <ChargeProcessTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ChargeProcessTask */
void ChargeProcessTask(void *argument)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f004 fb5f 	bl	8004e7c <osDelay>
 80007be:	e7fb      	b.n	80007b8 <ChargeProcessTask+0x8>

080007c0 <StatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StatusTask */
void StatusTask(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StatusTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f004 fb57 	bl	8004e7c <osDelay>
 80007ce:	e7fb      	b.n	80007c8 <StatusTask+0x8>

080007d0 <ReadCpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCpTask */
void ReadCpTask(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadCpTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f004 fb4f 	bl	8004e7c <osDelay>
 80007de:	e7fb      	b.n	80007d8 <ReadCpTask+0x8>

080007e0 <ModbusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModbusTask */
void ModbusTask(void *argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModbusTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f004 fb47 	bl	8004e7c <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <ModbusTask+0x8>

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_MspInit+0x4c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_MspInit+0x4c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_MspInit+0x4c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x4c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x4c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	f06f 0001 	mvn.w	r0, #1
 800083a:	f001 f8c6 	bl	80019ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800086c:	d12e      	bne.n	80008cc <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800086e:	4b33      	ldr	r3, [pc, #204]	; (800093c <HAL_ADC_MspInit+0xf0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a31      	ldr	r2, [pc, #196]	; (800093c <HAL_ADC_MspInit+0xf0>)
 8000876:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <HAL_ADC_MspInit+0xf0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10b      	bne.n	8000898 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000880:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6153      	str	r3, [r2, #20]
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	4a28      	ldr	r2, [pc, #160]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 800089e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a2:	6153      	str	r3, [r2, #20]
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CPread_Pin;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b4:	2303      	movs	r3, #3
 80008b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CPread_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f001 f8a9 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80008ca:	e032      	b.n	8000932 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_ADC_MspInit+0xf8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12d      	bne.n	8000932 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_ADC_MspInit+0xf0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_ADC_MspInit+0xf0>)
 80008de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_ADC_MspInit+0xf0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d10b      	bne.n	8000900 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6153      	str	r3, [r2, #20]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090a:	6153      	str	r3, [r2, #20]
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_ADC_MspInit+0xf4>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AC_Voltage_Pin;
 8000918:	2310      	movs	r3, #16
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AC_Voltage_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f001 f875 	bl	8001a1c <HAL_GPIO_Init>
}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001ac 	.word	0x200001ac
 8000940:	40021000 	.word	0x40021000
 8000944:	50000100 	.word	0x50000100

08000948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_TIM_Base_MspInit+0x38>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10b      	bne.n	8000972 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 8000960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40012c00 	.word	0x40012c00
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <HAL_TIM_MspPostInit+0x64>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d11c      	bne.n	80009e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_TIM_MspPostInit+0x68>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_TIM_MspPostInit+0x68>)
 80009b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_TIM_MspPostInit+0x68>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_TIM_MspPostInit+0x6c>)
 80009e0:	f001 f81c 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40012c00 	.word	0x40012c00
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000800 	.word	0x48000800

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0x7c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d128      	bne.n	8000a6c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	4a10      	ldr	r2, [pc, #64]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6153      	str	r3, [r2, #20]
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_UART_MspInit+0x80>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 ffd8 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f88c 	bl	8000bc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ab0:	f005 fdfe 	bl	80066b0 <xTaskGetSchedulerState>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d001      	beq.n	8000abe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aba:	f006 fbad 	bl	8007218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490e      	ldr	r1, [pc, #56]	; (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0b      	ldr	r4, [pc, #44]	; (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b12:	f7ff ffd7 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f006 fde9 	bl	80076ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fb59 	bl	80001d0 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b2c:	08007894 	.word	0x08007894
  ldr r2, =_sbss
 8000b30:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b34:	20001afc 	.word	0x20001afc

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 ff31 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fe50 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 ff3b 	bl	8001a02 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 ff11 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200001b0 	.word	0x200001b0

08000bf0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200001b0 	.word	0x200001b0

08000c08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09a      	sub	sp, #104	; 0x68
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e1c9      	b.n	8000fbc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d176      	bne.n	8000d28 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d152      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fdf5 	bl	800084c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d13b      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fd87 	bl	8001784 <ADC_Disable>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f003 0310 	and.w	r3, r3, #16
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d12f      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
 8000c88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d12b      	bne.n	8000ce8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c98:	f023 0302 	bic.w	r3, r3, #2
 8000c9c:	f043 0202 	orr.w	r2, r3, #2
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cb2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cc2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc4:	4b86      	ldr	r3, [pc, #536]	; (8000ee0 <HAL_ADC_Init+0x2d8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a86      	ldr	r2, [pc, #536]	; (8000ee4 <HAL_ADC_Init+0x2dc>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9a      	lsrs	r2, r3, #18
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cda:	e002      	b.n	8000ce2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f9      	bne.n	8000cdc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d04:	d110      	bne.n	8000d28 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f023 0312 	bic.w	r3, r3, #18
 8000d0e:	f043 0210 	orr.w	r2, r3, #16
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f040 8136 	bne.w	8000fa2 <HAL_ADC_Init+0x39a>
 8000d36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8131 	bne.w	8000fa2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 8129 	bne.w	8000fa2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d58:	f043 0202 	orr.w	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d68:	d004      	beq.n	8000d74 <HAL_ADC_Init+0x16c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a5e      	ldr	r2, [pc, #376]	; (8000ee8 <HAL_ADC_Init+0x2e0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_ADC_Init+0x170>
 8000d74:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_ADC_Init+0x2e4>)
 8000d76:	e000      	b.n	8000d7a <HAL_ADC_Init+0x172>
 8000d78:	4b5d      	ldr	r3, [pc, #372]	; (8000ef0 <HAL_ADC_Init+0x2e8>)
 8000d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d84:	d102      	bne.n	8000d8c <HAL_ADC_Init+0x184>
 8000d86:	4b58      	ldr	r3, [pc, #352]	; (8000ee8 <HAL_ADC_Init+0x2e0>)
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e01a      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a55      	ldr	r2, [pc, #340]	; (8000ee8 <HAL_ADC_Init+0x2e0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d103      	bne.n	8000d9e <HAL_ADC_Init+0x196>
 8000d96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e011      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a54      	ldr	r2, [pc, #336]	; (8000ef4 <HAL_ADC_Init+0x2ec>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d102      	bne.n	8000dae <HAL_ADC_Init+0x1a6>
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_ADC_Init+0x2f0>)
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	e009      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a51      	ldr	r2, [pc, #324]	; (8000ef8 <HAL_ADC_Init+0x2f0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d102      	bne.n	8000dbe <HAL_ADC_Init+0x1b6>
 8000db8:	4b4e      	ldr	r3, [pc, #312]	; (8000ef4 <HAL_ADC_Init+0x2ec>)
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	e001      	b.n	8000dc2 <HAL_ADC_Init+0x1ba>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_ADC_Init+0x1da>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Init+0x1da>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <HAL_ADC_Init+0x1dc>
 8000de2:	2300      	movs	r3, #0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d11c      	bne.n	8000e22 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000de8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d010      	beq.n	8000e10 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d107      	bne.n	8000e0a <HAL_ADC_Init+0x202>
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Init+0x202>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_ADC_Init+0x204>
 8000e0a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d108      	bne.n	8000e22 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e20:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7e5b      	ldrb	r3, [r3, #25]
 8000e26:	035b      	lsls	r3, r3, #13
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e2c:	2a01      	cmp	r2, #1
 8000e2e:	d002      	beq.n	8000e36 <HAL_ADC_Init+0x22e>
 8000e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e34:	e000      	b.n	8000e38 <HAL_ADC_Init+0x230>
 8000e36:	2200      	movs	r2, #0
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d11b      	bne.n	8000e8e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7e5b      	ldrb	r3, [r3, #25]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d109      	bne.n	8000e72 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	3b01      	subs	r3, #1
 8000e64:	045a      	lsls	r2, r3, #17
 8000e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	663b      	str	r3, [r7, #96]	; 0x60
 8000e70:	e00d      	b.n	8000e8e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000e7a:	f043 0220 	orr.w	r2, r3, #32
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d03a      	beq.n	8000f0c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <HAL_ADC_Init+0x2ec>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d004      	beq.n	8000eaa <HAL_ADC_Init+0x2a2>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_ADC_Init+0x2f0>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d128      	bne.n	8000efc <HAL_ADC_Init+0x2f4>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000eb2:	d012      	beq.n	8000eda <HAL_ADC_Init+0x2d2>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ebc:	d00a      	beq.n	8000ed4 <HAL_ADC_Init+0x2cc>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000ec6:	d002      	beq.n	8000ece <HAL_ADC_Init+0x2c6>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	e018      	b.n	8000f00 <HAL_ADC_Init+0x2f8>
 8000ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed2:	e015      	b.n	8000f00 <HAL_ADC_Init+0x2f8>
 8000ed4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ed8:	e012      	b.n	8000f00 <HAL_ADC_Init+0x2f8>
 8000eda:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ede:	e00f      	b.n	8000f00 <HAL_ADC_Init+0x2f8>
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	50000100 	.word	0x50000100
 8000eec:	50000300 	.word	0x50000300
 8000ef0:	50000700 	.word	0x50000700
 8000ef4:	50000400 	.word	0x50000400
 8000ef8:	50000500 	.word	0x50000500
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f04:	4313      	orrs	r3, r2
 8000f06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d114      	bne.n	8000f44 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f28:	f023 0302 	bic.w	r3, r3, #2
 8000f2c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7e1b      	ldrb	r3, [r3, #24]
 8000f32:	039a      	lsls	r2, r3, #14
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f40:	4313      	orrs	r3, r2
 8000f42:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_ADC_Init+0x3bc>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f54:	430b      	orrs	r3, r1
 8000f56:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10c      	bne.n	8000f7a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f023 010f 	bic.w	r1, r3, #15
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	631a      	str	r2, [r3, #48]	; 0x30
 8000f78:	e007      	b.n	8000f8a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 020f 	bic.w	r2, r2, #15
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f023 0303 	bic.w	r3, r3, #3
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa0:	e00a      	b.n	8000fb8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f023 0312 	bic.w	r3, r3, #18
 8000faa:	f043 0210 	orr.w	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3768      	adds	r7, #104	; 0x68
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	fff0c007 	.word	0xfff0c007

08000fc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b09b      	sub	sp, #108	; 0x6c
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d101      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x22>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e2ca      	b.n	8001580 <HAL_ADC_ConfigChannel+0x5b8>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f040 82ae 	bne.w	800155e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b04      	cmp	r3, #4
 8001008:	d81c      	bhi.n	8001044 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	461a      	mov	r2, r3
 800101e:	231f      	movs	r3, #31
 8001020:	4093      	lsls	r3, r2
 8001022:	43db      	mvns	r3, r3
 8001024:	4019      	ands	r1, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa00 f203 	lsl.w	r2, r0, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
 8001042:	e063      	b.n	800110c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b09      	cmp	r3, #9
 800104a:	d81e      	bhi.n	800108a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	3b1e      	subs	r3, #30
 8001060:	221f      	movs	r2, #31
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	4019      	ands	r1, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	3b1e      	subs	r3, #30
 800107c:	fa00 f203 	lsl.w	r2, r0, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
 8001088:	e040      	b.n	800110c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b0e      	cmp	r3, #14
 8001090:	d81e      	bhi.n	80010d0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	3b3c      	subs	r3, #60	; 0x3c
 80010a6:	221f      	movs	r2, #31
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4019      	ands	r1, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3b3c      	subs	r3, #60	; 0x3c
 80010c2:	fa00 f203 	lsl.w	r2, r0, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
 80010ce:	e01d      	b.n	800110c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	3b5a      	subs	r3, #90	; 0x5a
 80010e4:	221f      	movs	r2, #31
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	4019      	ands	r1, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	3b5a      	subs	r3, #90	; 0x5a
 8001100:	fa00 f203 	lsl.w	r2, r0, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 80e5 	bne.w	80012e6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b09      	cmp	r3, #9
 8001122:	d91c      	bls.n	800115e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6999      	ldr	r1, [r3, #24]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	3b1e      	subs	r3, #30
 8001136:	2207      	movs	r2, #7
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	4019      	ands	r1, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6898      	ldr	r0, [r3, #8]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	3b1e      	subs	r3, #30
 8001150:	fa00 f203 	lsl.w	r2, r0, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	619a      	str	r2, [r3, #24]
 800115c:	e019      	b.n	8001192 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6959      	ldr	r1, [r3, #20]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	2207      	movs	r2, #7
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6898      	ldr	r0, [r3, #8]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	fa00 f203 	lsl.w	r2, r0, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d84f      	bhi.n	8001254 <HAL_ADC_ConfigChannel+0x28c>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <HAL_ADC_ConfigChannel+0x1f4>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011cd 	.word	0x080011cd
 80011c0:	080011ef 	.word	0x080011ef
 80011c4:	08001211 	.word	0x08001211
 80011c8:	08001233 	.word	0x08001233
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d2:	4b9a      	ldr	r3, [pc, #616]	; (800143c <HAL_ADC_ConfigChannel+0x474>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	0691      	lsls	r1, r2, #26
 80011dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011de:	430a      	orrs	r2, r1
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011ea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011ec:	e07e      	b.n	80012ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011f4:	4b91      	ldr	r3, [pc, #580]	; (800143c <HAL_ADC_ConfigChannel+0x474>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	0691      	lsls	r1, r2, #26
 80011fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001200:	430a      	orrs	r2, r1
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800120c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800120e:	e06d      	b.n	80012ec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001216:	4b89      	ldr	r3, [pc, #548]	; (800143c <HAL_ADC_ConfigChannel+0x474>)
 8001218:	4013      	ands	r3, r2
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	0691      	lsls	r1, r2, #26
 8001220:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001222:	430a      	orrs	r2, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800122e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001230:	e05c      	b.n	80012ec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001238:	4b80      	ldr	r3, [pc, #512]	; (800143c <HAL_ADC_ConfigChannel+0x474>)
 800123a:	4013      	ands	r3, r2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	0691      	lsls	r1, r2, #26
 8001242:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001244:	430a      	orrs	r2, r1
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001250:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001252:	e04b      	b.n	80012ec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	069b      	lsls	r3, r3, #26
 8001264:	429a      	cmp	r2, r3
 8001266:	d107      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001276:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800127e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	069b      	lsls	r3, r3, #26
 8001288:	429a      	cmp	r2, r3
 800128a:	d107      	bne.n	800129c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800129a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	069b      	lsls	r3, r3, #26
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d107      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012be:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	069b      	lsls	r3, r3, #26
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d10a      	bne.n	80012ea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80012e2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80012e4:	e001      	b.n	80012ea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80012e6:	bf00      	nop
 80012e8:	e000      	b.n	80012ec <HAL_ADC_ConfigChannel+0x324>
      break;
 80012ea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d108      	bne.n	800130c <HAL_ADC_ConfigChannel+0x344>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x344>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_ADC_ConfigChannel+0x346>
 800130c:	2300      	movs	r3, #0
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 8130 	bne.w	8001574 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00f      	beq.n	800133c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2201      	movs	r2, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	400a      	ands	r2, r1
 8001336:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800133a:	e049      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b09      	cmp	r3, #9
 800135c:	d91c      	bls.n	8001398 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6999      	ldr	r1, [r3, #24]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	3b1b      	subs	r3, #27
 8001370:	2207      	movs	r2, #7
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	4019      	ands	r1, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6898      	ldr	r0, [r3, #8]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1b      	subs	r3, #27
 800138a:	fa00 f203 	lsl.w	r2, r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	e01b      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6959      	ldr	r1, [r3, #20]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	fa00 f203 	lsl.w	r2, r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013d8:	d004      	beq.n	80013e4 <HAL_ADC_ConfigChannel+0x41c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_ADC_ConfigChannel+0x478>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d101      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x420>
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_ADC_ConfigChannel+0x47c>)
 80013e6:	e000      	b.n	80013ea <HAL_ADC_ConfigChannel+0x422>
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_ADC_ConfigChannel+0x480>)
 80013ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80013f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d015      	beq.n	800142c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001404:	2b11      	cmp	r3, #17
 8001406:	d105      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001418:	2b12      	cmp	r3, #18
 800141a:	f040 80ab 	bne.w	8001574 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800141e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 80a4 	bne.w	8001574 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001434:	d10a      	bne.n	800144c <HAL_ADC_ConfigChannel+0x484>
 8001436:	4b02      	ldr	r3, [pc, #8]	; (8001440 <HAL_ADC_ConfigChannel+0x478>)
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e022      	b.n	8001482 <HAL_ADC_ConfigChannel+0x4ba>
 800143c:	83fff000 	.word	0x83fff000
 8001440:	50000100 	.word	0x50000100
 8001444:	50000300 	.word	0x50000300
 8001448:	50000700 	.word	0x50000700
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a4e      	ldr	r2, [pc, #312]	; (800158c <HAL_ADC_ConfigChannel+0x5c4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d103      	bne.n	800145e <HAL_ADC_ConfigChannel+0x496>
 8001456:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e011      	b.n	8001482 <HAL_ADC_ConfigChannel+0x4ba>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <HAL_ADC_ConfigChannel+0x5c8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d102      	bne.n	800146e <HAL_ADC_ConfigChannel+0x4a6>
 8001468:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <HAL_ADC_ConfigChannel+0x5cc>)
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e009      	b.n	8001482 <HAL_ADC_ConfigChannel+0x4ba>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_ADC_ConfigChannel+0x5cc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d102      	bne.n	800147e <HAL_ADC_ConfigChannel+0x4b6>
 8001478:	4b45      	ldr	r3, [pc, #276]	; (8001590 <HAL_ADC_ConfigChannel+0x5c8>)
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e001      	b.n	8001482 <HAL_ADC_ConfigChannel+0x4ba>
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d108      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x4da>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x4da>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x4dc>
 80014a2:	2300      	movs	r3, #0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d150      	bne.n	800154a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014a8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d010      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x502>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x502>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_ADC_ConfigChannel+0x504>
 80014ca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d13c      	bne.n	800154a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b10      	cmp	r3, #16
 80014d6:	d11d      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x54c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014e0:	d118      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80014e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_ADC_ConfigChannel+0x5d0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a2a      	ldr	r2, [pc, #168]	; (800159c <HAL_ADC_ConfigChannel+0x5d4>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	0c9a      	lsrs	r2, r3, #18
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001504:	e002      	b.n	800150c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3b01      	subs	r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f9      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001512:	e02e      	b.n	8001572 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b11      	cmp	r3, #17
 800151a:	d10b      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x56c>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001524:	d106      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800152e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001530:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001532:	e01e      	b.n	8001572 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b12      	cmp	r3, #18
 800153a:	d11a      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001546:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001548:	e013      	b.n	8001572 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f043 0220 	orr.w	r2, r3, #32
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800155c:	e00a      	b.n	8001574 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f043 0220 	orr.w	r2, r3, #32
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001570:	e000      	b.n	8001574 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001572:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800157c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001580:	4618      	mov	r0, r3
 8001582:	376c      	adds	r7, #108	; 0x6c
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	50000100 	.word	0x50000100
 8001590:	50000400 	.word	0x50000400
 8001594:	50000500 	.word	0x50000500
 8001598:	20000000 	.word	0x20000000
 800159c:	431bde83 	.word	0x431bde83

080015a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b099      	sub	sp, #100	; 0x64
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b8:	d102      	bne.n	80015c0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80015ba:	4b6d      	ldr	r3, [pc, #436]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	e01a      	b.n	80015f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d103      	bne.n	80015d2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80015ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	e011      	b.n	80015f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d102      	bne.n	80015e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	e009      	b.n	80015f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a64      	ldr	r2, [pc, #400]	; (8001778 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d102      	bne.n	80015f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80015ec:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	e001      	b.n	80015f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0b0      	b.n	8001762 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800160a:	2302      	movs	r3, #2
 800160c:	e0a9      	b.n	8001762 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 808d 	bne.w	8001740 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 8086 	bne.w	8001740 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800163c:	d004      	beq.n	8001648 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001648:	4b4c      	ldr	r3, [pc, #304]	; (800177c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800164a:	e000      	b.n	800164e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800164c:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800164e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d040      	beq.n	80016da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800166a:	035b      	lsls	r3, r3, #13
 800166c:	430b      	orrs	r3, r1
 800166e:	431a      	orrs	r2, r3
 8001670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001672:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001694:	2300      	movs	r3, #0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d15c      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80016b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d14b      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80016c4:	f023 030f 	bic.w	r3, r3, #15
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	6811      	ldr	r1, [r2, #0]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	6892      	ldr	r2, [r2, #8]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016d8:	e03c      	b.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80016da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001706:	2300      	movs	r3, #0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d123      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001728:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d112      	bne.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800172e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001736:	f023 030f 	bic.w	r3, r3, #15
 800173a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800173c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800173e:	e009      	b.n	8001754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f043 0220 	orr.w	r2, r3, #32
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001752:	e000      	b.n	8001756 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001754:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800175e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001762:	4618      	mov	r0, r3
 8001764:	3764      	adds	r7, #100	; 0x64
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	50000100 	.word	0x50000100
 8001774:	50000400 	.word	0x50000400
 8001778:	50000500 	.word	0x50000500
 800177c:	50000300 	.word	0x50000300
 8001780:	50000700 	.word	0x50000700

08001784 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <ADC_Disable+0x2c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <ADC_Disable+0x2c>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <ADC_Disable+0x2e>
 80017b0:	2300      	movs	r3, #0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d047      	beq.n	8001846 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030d 	and.w	r3, r3, #13
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10f      	bne.n	80017e4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0202 	orr.w	r2, r2, #2
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2203      	movs	r2, #3
 80017da:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fa08 	bl	8000bf0 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017e2:	e029      	b.n	8001838 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0210 	orr.w	r2, r3, #16
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f043 0201 	orr.w	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e023      	b.n	8001848 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001800:	f7ff f9f6 	bl	8000bf0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d914      	bls.n	8001838 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10d      	bne.n	8001838 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f043 0210 	orr.w	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e007      	b.n	8001848 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d0dc      	beq.n	8001800 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff47 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff5c 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffb0 	bl	8001970 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e154      	b.n	8001cd6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8146 	beq.w	8001cd0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x40>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d017      	beq.n	8001afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a0 	beq.w	8001cd0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <HAL_GPIO_Init+0x2d8>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <HAL_GPIO_Init+0x2d8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <HAL_GPIO_Init+0x2d8>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba8:	4a53      	ldr	r2, [pc, #332]	; (8001cf8 <HAL_GPIO_Init+0x2dc>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd2:	d019      	beq.n	8001c08 <HAL_GPIO_Init+0x1ec>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a49      	ldr	r2, [pc, #292]	; (8001cfc <HAL_GPIO_Init+0x2e0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_GPIO_Init+0x1e8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_GPIO_Init+0x1e4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <HAL_GPIO_Init+0x2e8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x1e0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a46      	ldr	r2, [pc, #280]	; (8001d08 <HAL_GPIO_Init+0x2ec>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_GPIO_Init+0x1dc>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e008      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	e006      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e004      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_GPIO_Init+0x1ee>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	f002 0203 	and.w	r2, r2, #3
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	4093      	lsls	r3, r2
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c1a:	4937      	ldr	r1, [pc, #220]	; (8001cf8 <HAL_GPIO_Init+0x2dc>)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c4c:	4a2f      	ldr	r2, [pc, #188]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f47f aea3 	bne.w	8001a2c <HAL_GPIO_Init+0x10>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	48000400 	.word	0x48000400
 8001d00:	48000800 	.word	0x48000800
 8001d04:	48000c00 	.word	0x48000c00
 8001d08:	48001000 	.word	0x48001000
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f001 b823 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 817d 	beq.w	8002076 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d7c:	4bbc      	ldr	r3, [pc, #752]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d00c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d88:	4bb9      	ldr	r3, [pc, #740]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d15c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x10e>
 8001d94:	4bb6      	ldr	r3, [pc, #728]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d155      	bne.n	8001e4e <HAL_RCC_OscConfig+0x10e>
 8001da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	095b      	lsrs	r3, r3, #5
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x94>
 8001dce:	4ba8      	ldr	r3, [pc, #672]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	e015      	b.n	8001e00 <HAL_RCC_OscConfig+0xc0>
 8001dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001df0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001dfc:	4b9c      	ldr	r3, [pc, #624]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e0c:	fa92 f2a2 	rbit	r2, r2
 8001e10:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e18:	fab2 f282 	clz	r2, r2
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	f042 0220 	orr.w	r2, r2, #32
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	f002 021f 	and.w	r2, r2, #31
 8001e28:	2101      	movs	r1, #1
 8001e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 811f 	beq.w	8002074 <HAL_RCC_OscConfig+0x334>
 8001e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 8116 	bne.w	8002074 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f000 bfaf 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12e>
 8001e60:	4b83      	ldr	r3, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a82      	ldr	r2, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e036      	b.n	8001edc <HAL_RCC_OscConfig+0x19c>
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x158>
 8001e7e:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7b      	ldr	r2, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b79      	ldr	r3, [pc, #484]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a78      	ldr	r2, [pc, #480]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e021      	b.n	8001edc <HAL_RCC_OscConfig+0x19c>
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x184>
 8001eaa:	4b71      	ldr	r3, [pc, #452]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a70      	ldr	r2, [pc, #448]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a6d      	ldr	r2, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0x19c>
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a69      	ldr	r2, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001edc:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	f023 020f 	bic.w	r2, r3, #15
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	495f      	ldr	r1, [pc, #380]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d059      	beq.n	8001fba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fe73 	bl	8000bf0 <HAL_GetTick>
 8001f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe fe6e 	bl	8000bf0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	; 0x64
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	f000 bf43 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
 8001f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_RCC_OscConfig+0x218>
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e015      	b.n	8001f84 <HAL_RCC_OscConfig+0x244>
 8001f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f70:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f88:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001f8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001f98:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ab      	beq.n	8001f10 <HAL_RCC_OscConfig+0x1d0>
 8001fb8:	e05d      	b.n	8002076 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fe19 	bl	8000bf0 <HAL_GetTick>
 8001fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe fe14 	bl	8000bf0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d902      	bls.n	8001fda <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	f000 bee9 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
 8001fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fde:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x2cc>
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e015      	b.n	8002038 <HAL_RCC_OscConfig+0x2f8>
 800200c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002010:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002024:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002028:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_RCC_OscConfig+0x330>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800203c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002040:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002044:	fa92 f2a2 	rbit	r2, r2
 8002048:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800204c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f042 0220 	orr.w	r2, r2, #32
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f002 021f 	and.w	r2, r2, #31
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ab      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x284>
 800206c:	e003      	b.n	8002076 <HAL_RCC_OscConfig+0x336>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 817d 	beq.w	8002386 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800208c:	4ba6      	ldr	r3, [pc, #664]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002098:	4ba3      	ldr	r3, [pc, #652]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d172      	bne.n	800218a <HAL_RCC_OscConfig+0x44a>
 80020a4:	4ba0      	ldr	r3, [pc, #640]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d16c      	bne.n	800218a <HAL_RCC_OscConfig+0x44a>
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80020c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3a0>
 80020da:	4b93      	ldr	r3, [pc, #588]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e013      	b.n	8002108 <HAL_RCC_OscConfig+0x3c8>
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002104:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800210e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800211a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCC_OscConfig+0x410>
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d002      	beq.n	8002150 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	f000 be2e 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b75      	ldr	r3, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	21f8      	movs	r1, #248	; 0xf8
 8002166:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800216e:	fa91 f1a1 	rbit	r1, r1
 8002172:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002176:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800217a:	fab1 f181 	clz	r1, r1
 800217e:	b2c9      	uxtb	r1, r1
 8002180:	408b      	lsls	r3, r1
 8002182:	4969      	ldr	r1, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002188:	e0fd      	b.n	8002386 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8088 	beq.w	80022ac <HAL_RCC_OscConfig+0x56c>
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	461a      	mov	r2, r3
 80021c4:	2301      	movs	r3, #1
 80021c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fd12 	bl	8000bf0 <HAL_GetTick>
 80021cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d2:	f7fe fd0d 	bl	8000bf0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f000 bde2 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80021fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d8>
 8002212:	4b45      	ldr	r3, [pc, #276]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e013      	b.n	8002240 <HAL_RCC_OscConfig+0x500>
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800222a:	2302      	movs	r3, #2
 800222c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002230:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	2202      	movs	r2, #2
 8002242:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002246:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002252:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0af      	beq.n	80021d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	21f8      	movs	r1, #248	; 0xf8
 8002288:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002290:	fa91 f1a1 	rbit	r1, r1
 8002294:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002298:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800229c:	fab1 f181 	clz	r1, r1
 80022a0:	b2c9      	uxtb	r1, r1
 80022a2:	408b      	lsls	r3, r1
 80022a4:	4920      	ldr	r1, [pc, #128]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
 80022aa:	e06c      	b.n	8002386 <HAL_RCC_OscConfig+0x646>
 80022ac:	2301      	movs	r3, #1
 80022ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80022be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	461a      	mov	r2, r3
 80022d4:	2300      	movs	r3, #0
 80022d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fc8a 	bl	8000bf0 <HAL_GetTick>
 80022dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7fe fc85 	bl	8000bf0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d902      	bls.n	80022f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f000 bd5a 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800230a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d104      	bne.n	800232c <HAL_RCC_OscConfig+0x5ec>
 8002322:	4b01      	ldr	r3, [pc, #4]	; (8002328 <HAL_RCC_OscConfig+0x5e8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e015      	b.n	8002354 <HAL_RCC_OscConfig+0x614>
 8002328:	40021000 	.word	0x40021000
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002344:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002350:	4bc8      	ldr	r3, [pc, #800]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	2202      	movs	r2, #2
 8002356:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800235a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800235e:	fa92 f2a2 	rbit	r2, r2
 8002362:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002366:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800236a:	fab2 f282 	clz	r2, r2
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f042 0220 	orr.w	r2, r2, #32
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f002 021f 	and.w	r2, r2, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1ad      	bne.n	80022e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8110 	beq.w	80025bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d079      	beq.n	80024a0 <HAL_RCC_OscConfig+0x760>
 80023ac:	2301      	movs	r3, #1
 80023ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	4bab      	ldr	r3, [pc, #684]	; (8002678 <HAL_RCC_OscConfig+0x938>)
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	2301      	movs	r3, #1
 80023d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7fe fc0b 	bl	8000bf0 <HAL_GetTick>
 80023da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fc06 	bl	8000bf0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d902      	bls.n	80023f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	f000 bcdb 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
 80023f6:	2302      	movs	r3, #2
 80023f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002410:	2202      	movs	r2, #2
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f2a3 	rbit	r2, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002434:	2202      	movs	r2, #2
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800244e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002450:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 8002452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800245c:	2102      	movs	r1, #2
 800245e:	6019      	str	r1, [r3, #0]
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f1a3 	rbit	r1, r3
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002476:	6019      	str	r1, [r3, #0]
  return result;
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0a0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x6a0>
 800249e:	e08d      	b.n	80025bc <HAL_RCC_OscConfig+0x87c>
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024a8:	2201      	movs	r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f2a3 	rbit	r2, r3
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024c2:	601a      	str	r2, [r3, #0]
  return result;
 80024c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b68      	ldr	r3, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x938>)
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	461a      	mov	r2, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7fe fb85 	bl	8000bf0 <HAL_GetTick>
 80024e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fb80 	bl	8000bf0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d902      	bls.n	8002502 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	f000 bc55 	b.w	8002dac <HAL_RCC_OscConfig+0x106c>
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800256c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 8002570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800257a:	2102      	movs	r1, #2
 800257c:	6019      	str	r1, [r3, #0]
 800257e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002582:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f1a3 	rbit	r1, r3
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002594:	6019      	str	r1, [r3, #0]
  return result;
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d197      	bne.n	80024ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 81a1 	beq.w	8002914 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d8:	4b26      	ldr	r3, [pc, #152]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d116      	bne.n	8002612 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ee:	61d3      	str	r3, [r2, #28]
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800260a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_OscConfig+0x93c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11a      	bne.n	8002654 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_RCC_OscConfig+0x93c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a16      	ldr	r2, [pc, #88]	; (800267c <HAL_RCC_OscConfig+0x93c>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7fe fae1 	bl	8000bf0 <HAL_GetTick>
 800262e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	e009      	b.n	8002648 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002634:	f7fe fadc 	bl	8000bf0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	; 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e3b1      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <HAL_RCC_OscConfig+0x93c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10d      	bne.n	8002680 <HAL_RCC_OscConfig+0x940>
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a02      	ldr	r2, [pc, #8]	; (8002674 <HAL_RCC_OscConfig+0x934>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e03c      	b.n	80026ec <HAL_RCC_OscConfig+0x9ac>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	10908120 	.word	0x10908120
 800267c:	40007000 	.word	0x40007000
 8002680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x96a>
 8002690:	4bc1      	ldr	r3, [pc, #772]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4ac0      	ldr	r2, [pc, #768]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	4bbe      	ldr	r3, [pc, #760]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4abd      	ldr	r2, [pc, #756]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026a2:	f023 0304 	bic.w	r3, r3, #4
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	e020      	b.n	80026ec <HAL_RCC_OscConfig+0x9ac>
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x994>
 80026ba:	4bb7      	ldr	r3, [pc, #732]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4ab6      	ldr	r2, [pc, #728]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	4bb4      	ldr	r3, [pc, #720]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4ab3      	ldr	r2, [pc, #716]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6213      	str	r3, [r2, #32]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0x9ac>
 80026d4:	4bb0      	ldr	r3, [pc, #704]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4aaf      	ldr	r2, [pc, #700]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	4bad      	ldr	r3, [pc, #692]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4aac      	ldr	r2, [pc, #688]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80026e6:	f023 0304 	bic.w	r3, r3, #4
 80026ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8081 	beq.w	8002800 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fa77 	bl	8000bf0 <HAL_GetTick>
 8002702:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fa72 	bl	8000bf0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e345      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002728:	2202      	movs	r2, #2
 800272a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002748:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800274c:	2202      	movs	r2, #2
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002762:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002766:	601a      	str	r2, [r3, #0]
  return result;
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002770:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0xa4c>
 8002786:	4b84      	ldr	r3, [pc, #528]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	e013      	b.n	80027b4 <HAL_RCC_OscConfig+0xa74>
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002794:	2202      	movs	r2, #2
 8002796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027bc:	2102      	movs	r1, #2
 80027be:	6011      	str	r1, [r2, #0]
 80027c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	fa92 f1a2 	rbit	r1, r2
 80027ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027d6:	6011      	str	r1, [r2, #0]
  return result;
 80027d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	f002 021f 	and.w	r2, r2, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d084      	beq.n	8002708 <HAL_RCC_OscConfig+0x9c8>
 80027fe:	e07f      	b.n	8002900 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe f9f6 	bl	8000bf0 <HAL_GetTick>
 8002804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002808:	e00b      	b.n	8002822 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe f9f1 	bl	8000bf0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e2c4      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800282a:	2202      	movs	r2, #2
 800282c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800284e:	2202      	movs	r2, #2
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002868:	601a      	str	r2, [r3, #0]
  return result;
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002872:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d102      	bne.n	800288e <HAL_RCC_OscConfig+0xb4e>
 8002888:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	e013      	b.n	80028b6 <HAL_RCC_OscConfig+0xb76>
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002896:	2202      	movs	r2, #2
 8002898:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	fa93 f2a3 	rbit	r2, r3
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028be:	2102      	movs	r1, #2
 80028c0:	6011      	str	r1, [r2, #0]
 80028c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	fa92 f1a2 	rbit	r1, r2
 80028d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028d8:	6011      	str	r1, [r2, #0]
  return result;
 80028da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028de:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	fab2 f282 	clz	r2, r2
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	f002 021f 	and.w	r2, r2, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f202 	lsl.w	r2, r1, r2
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d184      	bne.n	800280a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002900:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002908:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 800290e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002912:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002918:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8242 	beq.w	8002daa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_RCC_OscConfig+0xc58>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	f000 8213 	beq.w	8002d5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b02      	cmp	r3, #2
 8002942:	f040 8162 	bne.w	8002c0a <HAL_RCC_OscConfig+0xeca>
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800294e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002966:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800296a:	601a      	str	r2, [r3, #0]
  return result;
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002974:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	461a      	mov	r2, r3
 8002988:	2300      	movs	r3, #0
 800298a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe f930 	bl	8000bf0 <HAL_GetTick>
 8002990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002994:	e00c      	b.n	80029b0 <HAL_RCC_OscConfig+0xc70>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe f928 	bl	8000bf0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1fd      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f2a3 	rbit	r2, r3
 80029cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029d4:	601a      	str	r2, [r3, #0]
  return result;
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_OscConfig+0xcba>
 80029f4:	4bb0      	ldr	r3, [pc, #704]	; (8002cb8 <HAL_RCC_OscConfig+0xf78>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	e027      	b.n	8002a4a <HAL_RCC_OscConfig+0xd0a>
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	4b9c      	ldr	r3, [pc, #624]	; (8002cb8 <HAL_RCC_OscConfig+0xf78>)
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a56:	6011      	str	r1, [r2, #0]
 8002a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	fa92 f1a2 	rbit	r1, r2
 8002a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a6e:	6011      	str	r1, [r2, #0]
  return result;
 8002a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d182      	bne.n	800299c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a96:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0xf78>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	497f      	ldr	r1, [pc, #508]	; (8002cb8 <HAL_RCC_OscConfig+0xf78>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ae2:	601a      	str	r2, [r3, #0]
  return result;
 8002ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002aec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	461a      	mov	r2, r3
 8002b00:	2301      	movs	r3, #1
 8002b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe f874 	bl	8000bf0 <HAL_GetTick>
 8002b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b0c:	e009      	b.n	8002b22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7fe f86f 	bl	8000bf0 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e144      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b46:	601a      	str	r2, [r3, #0]
  return result;
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <HAL_RCC_OscConfig+0xe2c>
 8002b66:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <HAL_RCC_OscConfig+0xf78>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	e027      	b.n	8002bbc <HAL_RCC_OscConfig+0xe7c>
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	4b3f      	ldr	r3, [pc, #252]	; (8002cb8 <HAL_RCC_OscConfig+0xf78>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bc8:	6011      	str	r1, [r2, #0]
 8002bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	fa92 f1a2 	rbit	r1, r2
 8002bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bdc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002be0:	6011      	str	r1, [r2, #0]
  return result;
 8002be2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	fab2 f282 	clz	r2, r2
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f042 0220 	orr.w	r2, r2, #32
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	f002 021f 	and.w	r2, r2, #31
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d082      	beq.n	8002b0e <HAL_RCC_OscConfig+0xdce>
 8002c08:	e0cf      	b.n	8002daa <HAL_RCC_OscConfig+0x106a>
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c2e:	601a      	str	r2, [r3, #0]
  return result;
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fd ffce 	bl	8000bf0 <HAL_GetTick>
 8002c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c58:	e009      	b.n	8002c6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7fd ffc9 	bl	8000bf0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e09e      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	fa93 f2a3 	rbit	r2, r3
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c92:	601a      	str	r2, [r3, #0]
  return result;
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d104      	bne.n	8002cbc <HAL_RCC_OscConfig+0xf7c>
 8002cb2:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <HAL_RCC_OscConfig+0xf78>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	e029      	b.n	8002d0c <HAL_RCC_OscConfig+0xfcc>
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	fa93 f2a3 	rbit	r2, r3
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <HAL_RCC_OscConfig+0x1078>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d18:	6011      	str	r1, [r2, #0]
 8002d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	fa92 f1a2 	rbit	r1, r2
 8002d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d30:	6011      	str	r1, [r2, #0]
  return result;
 8002d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	fab2 f282 	clz	r2, r2
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f042 0220 	orr.w	r2, r2, #32
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	f002 021f 	and.w	r2, r2, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d180      	bne.n	8002c5a <HAL_RCC_OscConfig+0xf1a>
 8002d58:	e027      	b.n	8002daa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e01e      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_RCC_OscConfig+0x1078>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d10b      	bne.n	8002da6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b09e      	sub	sp, #120	; 0x78
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e162      	b.n	800309a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b90      	ldr	r3, [pc, #576]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d910      	bls.n	8002e04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b8d      	ldr	r3, [pc, #564]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 0207 	bic.w	r2, r3, #7
 8002dea:	498b      	ldr	r1, [pc, #556]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b89      	ldr	r3, [pc, #548]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e14a      	b.n	800309a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b82      	ldr	r3, [pc, #520]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	497f      	ldr	r1, [pc, #508]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80dc 	beq.w	8002fe8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d13c      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xf6>
 8002e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xa6>
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e00f      	b.n	8002e82 <HAL_RCC_ClockConfig+0xc6>
 8002e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8002e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e74:	663b      	str	r3, [r7, #96]	; 0x60
 8002e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e86:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0220 	orr.w	r2, r2, #32
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d17b      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e0f3      	b.n	800309a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d13c      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x178>
 8002eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x128>
 8002ede:	4b4f      	ldr	r3, [pc, #316]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e00f      	b.n	8002f04 <HAL_RCC_ClockConfig+0x148>
 8002ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f08:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f0c:	fa92 f2a2 	rbit	r2, r2
 8002f10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f14:	fab2 f282 	clz	r2, r2
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f042 0220 	orr.w	r2, r2, #32
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f002 021f 	and.w	r2, r2, #31
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d13a      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b2      	b.n	800309a <HAL_RCC_ClockConfig+0x2de>
 8002f34:	2302      	movs	r3, #2
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x1a0>
 8002f56:	4b31      	ldr	r3, [pc, #196]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	e00d      	b.n	8002f78 <HAL_RCC_ClockConfig+0x1bc>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
 8002f68:	2302      	movs	r3, #2
 8002f6a:	623b      	str	r3, [r7, #32]
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2202      	movs	r2, #2
 8002f7a:	61ba      	str	r2, [r7, #24]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	fa92 f2a2 	rbit	r2, r2
 8002f82:	617a      	str	r2, [r7, #20]
  return result;
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	f042 0220 	orr.w	r2, r2, #32
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f002 021f 	and.w	r2, r2, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e079      	b.n	800309a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	491a      	ldr	r1, [pc, #104]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb8:	f7fd fe1a 	bl	8000bf0 <HAL_GetTick>
 8002fbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc0:	f7fd fe16 	bl	8000bf0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e061      	b.n	800309a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 020c 	and.w	r2, r3, #12
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d1eb      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d214      	bcs.n	8003020 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0207 	bic.w	r2, r3, #7
 8002ffe:	4906      	ldr	r1, [pc, #24]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b04      	ldr	r3, [pc, #16]	; (8003018 <HAL_RCC_ClockConfig+0x25c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e040      	b.n	800309a <HAL_RCC_ClockConfig+0x2de>
 8003018:	40022000 	.word	0x40022000
 800301c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800302c:	4b1d      	ldr	r3, [pc, #116]	; (80030a4 <HAL_RCC_ClockConfig+0x2e8>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	491a      	ldr	r1, [pc, #104]	; (80030a4 <HAL_RCC_ClockConfig+0x2e8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_RCC_ClockConfig+0x2e8>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4912      	ldr	r1, [pc, #72]	; (80030a4 <HAL_RCC_ClockConfig+0x2e8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800305e:	f000 f829 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 8003062:	4601      	mov	r1, r0
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306c:	22f0      	movs	r2, #240	; 0xf0
 800306e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	fa92 f2a2 	rbit	r2, r2
 8003076:	60fa      	str	r2, [r7, #12]
  return result;
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	fab2 f282 	clz	r2, r2
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	40d3      	lsrs	r3, r2
 8003082:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	fa21 f303 	lsr.w	r3, r1, r3
 800308a:	4a08      	ldr	r2, [pc, #32]	; (80030ac <HAL_RCC_ClockConfig+0x2f0>)
 800308c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fd68 	bl	8000b68 <HAL_InitTick>
  
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3778      	adds	r7, #120	; 0x78
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08007854 	.word	0x08007854
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b08b      	sub	sp, #44	; 0x2c
 80030b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x30>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x36>
 80030e2:	e03c      	b.n	800315e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b24      	ldr	r3, [pc, #144]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc4>)
 80030e6:	623b      	str	r3, [r7, #32]
      break;
 80030e8:	e03c      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	fa92 f2a2 	rbit	r2, r2
 80030fc:	607a      	str	r2, [r7, #4]
  return result;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	40d3      	lsrs	r3, r2
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <HAL_RCC_GetSysClockFreq+0xc8>)
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	220f      	movs	r2, #15
 8003118:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	fa92 f2a2 	rbit	r2, r2
 8003120:	60fa      	str	r2, [r7, #12]
  return result;
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	fab2 f282 	clz	r2, r2
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	40d3      	lsrs	r3, r2
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_RCC_GetSysClockFreq+0xcc>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800313c:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc4>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	fbb2 f2f3 	udiv	r2, r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fb02 f303 	mul.w	r3, r2, r3
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	e004      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	623b      	str	r3, [r7, #32]
      break;
 800315c:	e002      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003160:	623b      	str	r3, [r7, #32]
      break;
 8003162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003164:	6a3b      	ldr	r3, [r7, #32]
}
 8003166:	4618      	mov	r0, r3
 8003168:	372c      	adds	r7, #44	; 0x2c
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	007a1200 	.word	0x007a1200
 800317c:	0800786c 	.word	0x0800786c
 8003180:	0800787c 	.word	0x0800787c
 8003184:	003d0900 	.word	0x003d0900

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_RCC_GetHCLKFreq+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031a6:	f7ff ffef 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031aa:	4601      	mov	r1, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	fa92 f2a2 	rbit	r2, r2
 80031c0:	603a      	str	r2, [r7, #0]
  return result;
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	40d3      	lsrs	r3, r2
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031ce:	5cd3      	ldrb	r3, [r2, r3]
 80031d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08007864 	.word	0x08007864

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031ea:	f7ff ffcd 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031ee:	4601      	mov	r1, r0
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	fa92 f2a2 	rbit	r2, r2
 8003204:	603a      	str	r2, [r7, #0]
  return result;
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	40d3      	lsrs	r3, r2
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003212:	5cd3      	ldrb	r3, [r2, r3]
 8003214:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000
 8003224:	08007864 	.word	0x08007864

08003228 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b092      	sub	sp, #72	; 0x48
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80d4 	beq.w	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324c:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10e      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003258:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	4a4a      	ldr	r2, [pc, #296]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003262:	61d3      	str	r3, [r2, #28]
 8003264:	4b48      	ldr	r3, [pc, #288]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b45      	ldr	r3, [pc, #276]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d118      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003282:	4b42      	ldr	r3, [pc, #264]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a41      	ldr	r2, [pc, #260]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328e:	f7fd fcaf 	bl	8000bf0 <HAL_GetTick>
 8003292:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	e008      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003296:	f7fd fcab 	bl	8000bf0 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b64      	cmp	r3, #100	; 0x64
 80032a2:	d901      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e169      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8084 	beq.w	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d07c      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d4:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b26      	ldr	r3, [pc, #152]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	461a      	mov	r2, r3
 80032fe:	2301      	movs	r3, #1
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	2300      	movs	r3, #0
 8003324:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800332c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04b      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fd fc5b 	bl	8000bf0 <HAL_GetTick>
 800333a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fd fc57 	bl	8000bf0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e113      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003354:	2302      	movs	r3, #2
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	2302      	movs	r3, #2
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	61fb      	str	r3, [r7, #28]
  return result;
 800336c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d108      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003382:	4b01      	ldr	r3, [pc, #4]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	e00d      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	10908100 	.word	0x10908100
 8003394:	2302      	movs	r3, #2
 8003396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	4b78      	ldr	r3, [pc, #480]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2202      	movs	r2, #2
 80033a6:	613a      	str	r2, [r7, #16]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	fa92 f2a2 	rbit	r2, r2
 80033ae:	60fa      	str	r2, [r7, #12]
  return result;
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	fab2 f282 	clz	r2, r2
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f002 021f 	and.w	r2, r2, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0b7      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033ce:	4b6d      	ldr	r3, [pc, #436]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	496a      	ldr	r1, [pc, #424]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4a65      	ldr	r2, [pc, #404]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003400:	4b60      	ldr	r3, [pc, #384]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f023 0203 	bic.w	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	495d      	ldr	r1, [pc, #372]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800341e:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	4956      	ldr	r1, [pc, #344]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800343c:	4b51      	ldr	r3, [pc, #324]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	494e      	ldr	r1, [pc, #312]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345a:	4b4a      	ldr	r3, [pc, #296]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f023 0210 	bic.w	r2, r3, #16
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4947      	ldr	r1, [pc, #284]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003468:	4313      	orrs	r3, r2
 800346a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003478:	4b42      	ldr	r3, [pc, #264]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	493f      	ldr	r1, [pc, #252]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f023 0220 	bic.w	r2, r3, #32
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4938      	ldr	r1, [pc, #224]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	4930      	ldr	r1, [pc, #192]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034d2:	4b2c      	ldr	r3, [pc, #176]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	4929      	ldr	r1, [pc, #164]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	4921      	ldr	r1, [pc, #132]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	491a      	ldr	r1, [pc, #104]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800352c:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	4912      	ldr	r1, [pc, #72]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	490b      	ldr	r1, [pc, #44]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003558:	4313      	orrs	r3, r2
 800355a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003576:	4313      	orrs	r3, r2
 8003578:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3748      	adds	r7, #72	; 0x48
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000

08003588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e049      	b.n	800362e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd f9ca 	bl	8000948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f000 fa74 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e049      	b.n	80036dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f841 	bl	80036e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f000 fa1d 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003712:	2302      	movs	r3, #2
 8003714:	e0ff      	b.n	8003916 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b14      	cmp	r3, #20
 8003722:	f200 80f0 	bhi.w	8003906 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003781 	.word	0x08003781
 8003730:	08003907 	.word	0x08003907
 8003734:	08003907 	.word	0x08003907
 8003738:	08003907 	.word	0x08003907
 800373c:	080037c1 	.word	0x080037c1
 8003740:	08003907 	.word	0x08003907
 8003744:	08003907 	.word	0x08003907
 8003748:	08003907 	.word	0x08003907
 800374c:	08003803 	.word	0x08003803
 8003750:	08003907 	.word	0x08003907
 8003754:	08003907 	.word	0x08003907
 8003758:	08003907 	.word	0x08003907
 800375c:	08003843 	.word	0x08003843
 8003760:	08003907 	.word	0x08003907
 8003764:	08003907 	.word	0x08003907
 8003768:	08003907 	.word	0x08003907
 800376c:	08003885 	.word	0x08003885
 8003770:	08003907 	.word	0x08003907
 8003774:	08003907 	.word	0x08003907
 8003778:	08003907 	.word	0x08003907
 800377c:	080038c5 	.word	0x080038c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fa24 	bl	8003bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0204 	bic.w	r2, r2, #4
 80037aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6999      	ldr	r1, [r3, #24]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	619a      	str	r2, [r3, #24]
      break;
 80037be:	e0a5      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fa94 	bl	8003cf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6999      	ldr	r1, [r3, #24]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	021a      	lsls	r2, r3, #8
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	619a      	str	r2, [r3, #24]
      break;
 8003800:	e084      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fafd 	bl	8003e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0208 	orr.w	r2, r2, #8
 800381c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0204 	bic.w	r2, r2, #4
 800382c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69d9      	ldr	r1, [r3, #28]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	61da      	str	r2, [r3, #28]
      break;
 8003840:	e064      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fb65 	bl	8003f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800385c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69d9      	ldr	r1, [r3, #28]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	021a      	lsls	r2, r3, #8
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	61da      	str	r2, [r3, #28]
      break;
 8003882:	e043      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fbae 	bl	8003fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0208 	orr.w	r2, r2, #8
 800389e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0204 	bic.w	r2, r2, #4
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038c2:	e023      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fbf2 	bl	80040b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	021a      	lsls	r2, r3, #8
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003904:	e002      	b.n	800390c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	75fb      	strb	r3, [r7, #23]
      break;
 800390a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop

08003920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_TIM_ConfigClockSource+0x1c>
 8003938:	2302      	movs	r3, #2
 800393a:	e0b6      	b.n	8003aaa <HAL_TIM_ConfigClockSource+0x18a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800395e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003978:	d03e      	beq.n	80039f8 <HAL_TIM_ConfigClockSource+0xd8>
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397e:	f200 8087 	bhi.w	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	f000 8086 	beq.w	8003a96 <HAL_TIM_ConfigClockSource+0x176>
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398e:	d87f      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 8003990:	2b70      	cmp	r3, #112	; 0x70
 8003992:	d01a      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0xaa>
 8003994:	2b70      	cmp	r3, #112	; 0x70
 8003996:	d87b      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 8003998:	2b60      	cmp	r3, #96	; 0x60
 800399a:	d050      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x11e>
 800399c:	2b60      	cmp	r3, #96	; 0x60
 800399e:	d877      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 80039a0:	2b50      	cmp	r3, #80	; 0x50
 80039a2:	d03c      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0xfe>
 80039a4:	2b50      	cmp	r3, #80	; 0x50
 80039a6:	d873      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d058      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x13e>
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d86f      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 80039b0:	2b30      	cmp	r3, #48	; 0x30
 80039b2:	d064      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x15e>
 80039b4:	2b30      	cmp	r3, #48	; 0x30
 80039b6:	d86b      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d060      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x15e>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d867      	bhi.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05c      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x15e>
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d05a      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x15e>
 80039c8:	e062      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6899      	ldr	r1, [r3, #8]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f000 fc4b 	bl	8004274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	609a      	str	r2, [r3, #8]
      break;
 80039f6:	e04f      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6899      	ldr	r1, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f000 fc34 	bl	8004274 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1a:	609a      	str	r2, [r3, #8]
      break;
 8003a1c:	e03c      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 fba8 	bl	8004180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2150      	movs	r1, #80	; 0x50
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fc01 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e02c      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 fbc7 	bl	80041de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2160      	movs	r1, #96	; 0x60
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fbf1 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e01c      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 fb88 	bl	8004180 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2140      	movs	r1, #64	; 0x40
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fbe1 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e00c      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f000 fbd8 	bl	800423e <TIM_ITRx_SetConfig>
      break;
 8003a8e:	e003      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      break;
 8003a94:	e000      	b.n	8003a98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <TIM_Base_SetConfig+0x104>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00f      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a39      	ldr	r2, [pc, #228]	; (8003bbc <TIM_Base_SetConfig+0x108>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <TIM_Base_SetConfig+0x10c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0x38>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a37      	ldr	r2, [pc, #220]	; (8003bc4 <TIM_Base_SetConfig+0x110>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2d      	ldr	r2, [pc, #180]	; (8003bb8 <TIM_Base_SetConfig+0x104>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01b      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0c:	d017      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <TIM_Base_SetConfig+0x108>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <TIM_Base_SetConfig+0x10c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_Base_SetConfig+0x110>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <TIM_Base_SetConfig+0x114>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <TIM_Base_SetConfig+0x118>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <TIM_Base_SetConfig+0x11c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <TIM_Base_SetConfig+0x104>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00f      	beq.n	8003b9c <TIM_Base_SetConfig+0xe8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <TIM_Base_SetConfig+0x110>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_Base_SetConfig+0xe8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <TIM_Base_SetConfig+0x114>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_Base_SetConfig+0xe8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <TIM_Base_SetConfig+0x118>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0xe8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a0e      	ldr	r2, [pc, #56]	; (8003bd0 <TIM_Base_SetConfig+0x11c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800

08003bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f023 0201 	bic.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 0302 	bic.w	r3, r3, #2
 8003c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ce0 <TIM_OC1_SetConfig+0x10c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00f      	beq.n	8003c54 <TIM_OC1_SetConfig+0x80>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a2b      	ldr	r2, [pc, #172]	; (8003ce4 <TIM_OC1_SetConfig+0x110>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_OC1_SetConfig+0x80>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ce8 <TIM_OC1_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <TIM_OC1_SetConfig+0x80>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a29      	ldr	r2, [pc, #164]	; (8003cec <TIM_OC1_SetConfig+0x118>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC1_SetConfig+0x80>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a28      	ldr	r2, [pc, #160]	; (8003cf0 <TIM_OC1_SetConfig+0x11c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10c      	bne.n	8003c6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 0308 	bic.w	r3, r3, #8
 8003c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <TIM_OC1_SetConfig+0x10c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00f      	beq.n	8003c96 <TIM_OC1_SetConfig+0xc2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1a      	ldr	r2, [pc, #104]	; (8003ce4 <TIM_OC1_SetConfig+0x110>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_OC1_SetConfig+0xc2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <TIM_OC1_SetConfig+0x114>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_OC1_SetConfig+0xc2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <TIM_OC1_SetConfig+0x118>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_OC1_SetConfig+0xc2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <TIM_OC1_SetConfig+0x11c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d111      	bne.n	8003cba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40013400 	.word	0x40013400
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400
 8003cf0:	40014800 	.word	0x40014800

08003cf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	f023 0210 	bic.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0320 	bic.w	r3, r3, #32
 8003d42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a28      	ldr	r2, [pc, #160]	; (8003df4 <TIM_OC2_SetConfig+0x100>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_OC2_SetConfig+0x6c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a27      	ldr	r2, [pc, #156]	; (8003df8 <TIM_OC2_SetConfig+0x104>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10d      	bne.n	8003d7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <TIM_OC2_SetConfig+0x100>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00f      	beq.n	8003da4 <TIM_OC2_SetConfig+0xb0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <TIM_OC2_SetConfig+0x104>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <TIM_OC2_SetConfig+0xb0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <TIM_OC2_SetConfig+0x108>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <TIM_OC2_SetConfig+0xb0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a1a      	ldr	r2, [pc, #104]	; (8003e00 <TIM_OC2_SetConfig+0x10c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_OC2_SetConfig+0xb0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <TIM_OC2_SetConfig+0x110>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d113      	bne.n	8003dcc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003daa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	bf00      	nop
 8003de8:	371c      	adds	r7, #28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40013400 	.word	0x40013400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800

08003e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <TIM_OC3_SetConfig+0xfc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_OC3_SetConfig+0x6a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <TIM_OC3_SetConfig+0x100>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10d      	bne.n	8003e8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <TIM_OC3_SetConfig+0xfc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00f      	beq.n	8003eb6 <TIM_OC3_SetConfig+0xae>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <TIM_OC3_SetConfig+0x100>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_OC3_SetConfig+0xae>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <TIM_OC3_SetConfig+0x104>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_OC3_SetConfig+0xae>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <TIM_OC3_SetConfig+0x108>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_OC3_SetConfig+0xae>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a18      	ldr	r2, [pc, #96]	; (8003f14 <TIM_OC3_SetConfig+0x10c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d113      	bne.n	8003ede <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40013400 	.word	0x40013400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800

08003f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	031b      	lsls	r3, r3, #12
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <TIM_OC4_SetConfig+0xc0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00f      	beq.n	8003f9c <TIM_OC4_SetConfig+0x84>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <TIM_OC4_SetConfig+0xc4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <TIM_OC4_SetConfig+0x84>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a16      	ldr	r2, [pc, #88]	; (8003fe0 <TIM_OC4_SetConfig+0xc8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_OC4_SetConfig+0x84>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <TIM_OC4_SetConfig+0xcc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_OC4_SetConfig+0x84>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <TIM_OC4_SetConfig+0xd0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d109      	bne.n	8003fb0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40013400 	.word	0x40013400
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40014400 	.word	0x40014400
 8003fe8:	40014800 	.word	0x40014800

08003fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <TIM_OC5_SetConfig+0xb4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <TIM_OC5_SetConfig+0x7a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <TIM_OC5_SetConfig+0xb8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_OC5_SetConfig+0x7a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <TIM_OC5_SetConfig+0xbc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_OC5_SetConfig+0x7a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <TIM_OC5_SetConfig+0xc0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_OC5_SetConfig+0x7a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <TIM_OC5_SetConfig+0xc4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d109      	bne.n	800407a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	621a      	str	r2, [r3, #32]
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40013400 	.word	0x40013400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40014400 	.word	0x40014400
 80040b0:	40014800 	.word	0x40014800

080040b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	051b      	lsls	r3, r3, #20
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a18      	ldr	r2, [pc, #96]	; (800416c <TIM_OC6_SetConfig+0xb8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00f      	beq.n	8004130 <TIM_OC6_SetConfig+0x7c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <TIM_OC6_SetConfig+0xbc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00b      	beq.n	8004130 <TIM_OC6_SetConfig+0x7c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <TIM_OC6_SetConfig+0xc0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d007      	beq.n	8004130 <TIM_OC6_SetConfig+0x7c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <TIM_OC6_SetConfig+0xc4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC6_SetConfig+0x7c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a14      	ldr	r2, [pc, #80]	; (800417c <TIM_OC6_SetConfig+0xc8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d109      	bne.n	8004144 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004136:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	029b      	lsls	r3, r3, #10
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40013400 	.word	0x40013400
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800

08004180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0201 	bic.w	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 030a 	bic.w	r3, r3, #10
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041de:	b480      	push	{r7}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800421a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	f043 0307 	orr.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800428e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	021a      	lsls	r2, r3, #8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	431a      	orrs	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	609a      	str	r2, [r3, #8]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e063      	b.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004306:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d013      	beq.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a17      	ldr	r2, [pc, #92]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	4313      	orrs	r3, r2
 8004378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40013400 	.word	0x40013400
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40014000 	.word	0x40014000

080043b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e065      	b.n	800449c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a14      	ldr	r2, [pc, #80]	; (80044ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d115      	bne.n	800448a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	051b      	lsls	r3, r3, #20
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40013400 	.word	0x40013400

080044b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e040      	b.n	8004544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fa90 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f82c 	bl	800454c <UART_SetConfig>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e022      	b.n	8004544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9f6 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fa7d 	bl	8004a3c <UART_CheckIdleState>
 8004542:	4603      	mov	r3, r0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800457a:	f023 030c 	bic.w	r3, r3, #12
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	430b      	orrs	r3, r1
 8004586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4aa8      	ldr	r2, [pc, #672]	; (8004868 <UART_SetConfig+0x31c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d120      	bne.n	800460e <UART_SetConfig+0xc2>
 80045cc:	4ba7      	ldr	r3, [pc, #668]	; (800486c <UART_SetConfig+0x320>)
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d817      	bhi.n	8004608 <UART_SetConfig+0xbc>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <UART_SetConfig+0x94>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	080045fd 	.word	0x080045fd
 80045e8:	08004603 	.word	0x08004603
 80045ec:	080045f7 	.word	0x080045f7
 80045f0:	2301      	movs	r3, #1
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e0b5      	b.n	8004762 <UART_SetConfig+0x216>
 80045f6:	2302      	movs	r3, #2
 80045f8:	77fb      	strb	r3, [r7, #31]
 80045fa:	e0b2      	b.n	8004762 <UART_SetConfig+0x216>
 80045fc:	2304      	movs	r3, #4
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e0af      	b.n	8004762 <UART_SetConfig+0x216>
 8004602:	2308      	movs	r3, #8
 8004604:	77fb      	strb	r3, [r7, #31]
 8004606:	e0ac      	b.n	8004762 <UART_SetConfig+0x216>
 8004608:	2310      	movs	r3, #16
 800460a:	77fb      	strb	r3, [r7, #31]
 800460c:	e0a9      	b.n	8004762 <UART_SetConfig+0x216>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a97      	ldr	r2, [pc, #604]	; (8004870 <UART_SetConfig+0x324>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d124      	bne.n	8004662 <UART_SetConfig+0x116>
 8004618:	4b94      	ldr	r3, [pc, #592]	; (800486c <UART_SetConfig+0x320>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004624:	d011      	beq.n	800464a <UART_SetConfig+0xfe>
 8004626:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800462a:	d817      	bhi.n	800465c <UART_SetConfig+0x110>
 800462c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004630:	d011      	beq.n	8004656 <UART_SetConfig+0x10a>
 8004632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004636:	d811      	bhi.n	800465c <UART_SetConfig+0x110>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <UART_SetConfig+0xf8>
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d006      	beq.n	8004650 <UART_SetConfig+0x104>
 8004642:	e00b      	b.n	800465c <UART_SetConfig+0x110>
 8004644:	2300      	movs	r3, #0
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e08b      	b.n	8004762 <UART_SetConfig+0x216>
 800464a:	2302      	movs	r3, #2
 800464c:	77fb      	strb	r3, [r7, #31]
 800464e:	e088      	b.n	8004762 <UART_SetConfig+0x216>
 8004650:	2304      	movs	r3, #4
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e085      	b.n	8004762 <UART_SetConfig+0x216>
 8004656:	2308      	movs	r3, #8
 8004658:	77fb      	strb	r3, [r7, #31]
 800465a:	e082      	b.n	8004762 <UART_SetConfig+0x216>
 800465c:	2310      	movs	r3, #16
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e07f      	b.n	8004762 <UART_SetConfig+0x216>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a83      	ldr	r2, [pc, #524]	; (8004874 <UART_SetConfig+0x328>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d124      	bne.n	80046b6 <UART_SetConfig+0x16a>
 800466c:	4b7f      	ldr	r3, [pc, #508]	; (800486c <UART_SetConfig+0x320>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004674:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004678:	d011      	beq.n	800469e <UART_SetConfig+0x152>
 800467a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800467e:	d817      	bhi.n	80046b0 <UART_SetConfig+0x164>
 8004680:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004684:	d011      	beq.n	80046aa <UART_SetConfig+0x15e>
 8004686:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800468a:	d811      	bhi.n	80046b0 <UART_SetConfig+0x164>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <UART_SetConfig+0x14c>
 8004690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004694:	d006      	beq.n	80046a4 <UART_SetConfig+0x158>
 8004696:	e00b      	b.n	80046b0 <UART_SetConfig+0x164>
 8004698:	2300      	movs	r3, #0
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e061      	b.n	8004762 <UART_SetConfig+0x216>
 800469e:	2302      	movs	r3, #2
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e05e      	b.n	8004762 <UART_SetConfig+0x216>
 80046a4:	2304      	movs	r3, #4
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e05b      	b.n	8004762 <UART_SetConfig+0x216>
 80046aa:	2308      	movs	r3, #8
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e058      	b.n	8004762 <UART_SetConfig+0x216>
 80046b0:	2310      	movs	r3, #16
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e055      	b.n	8004762 <UART_SetConfig+0x216>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6f      	ldr	r2, [pc, #444]	; (8004878 <UART_SetConfig+0x32c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d124      	bne.n	800470a <UART_SetConfig+0x1be>
 80046c0:	4b6a      	ldr	r3, [pc, #424]	; (800486c <UART_SetConfig+0x320>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046cc:	d011      	beq.n	80046f2 <UART_SetConfig+0x1a6>
 80046ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046d2:	d817      	bhi.n	8004704 <UART_SetConfig+0x1b8>
 80046d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d8:	d011      	beq.n	80046fe <UART_SetConfig+0x1b2>
 80046da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046de:	d811      	bhi.n	8004704 <UART_SetConfig+0x1b8>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <UART_SetConfig+0x1a0>
 80046e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e8:	d006      	beq.n	80046f8 <UART_SetConfig+0x1ac>
 80046ea:	e00b      	b.n	8004704 <UART_SetConfig+0x1b8>
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e037      	b.n	8004762 <UART_SetConfig+0x216>
 80046f2:	2302      	movs	r3, #2
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e034      	b.n	8004762 <UART_SetConfig+0x216>
 80046f8:	2304      	movs	r3, #4
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e031      	b.n	8004762 <UART_SetConfig+0x216>
 80046fe:	2308      	movs	r3, #8
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e02e      	b.n	8004762 <UART_SetConfig+0x216>
 8004704:	2310      	movs	r3, #16
 8004706:	77fb      	strb	r3, [r7, #31]
 8004708:	e02b      	b.n	8004762 <UART_SetConfig+0x216>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a5b      	ldr	r2, [pc, #364]	; (800487c <UART_SetConfig+0x330>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d124      	bne.n	800475e <UART_SetConfig+0x212>
 8004714:	4b55      	ldr	r3, [pc, #340]	; (800486c <UART_SetConfig+0x320>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800471c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004720:	d011      	beq.n	8004746 <UART_SetConfig+0x1fa>
 8004722:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004726:	d817      	bhi.n	8004758 <UART_SetConfig+0x20c>
 8004728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472c:	d011      	beq.n	8004752 <UART_SetConfig+0x206>
 800472e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004732:	d811      	bhi.n	8004758 <UART_SetConfig+0x20c>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <UART_SetConfig+0x1f4>
 8004738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800473c:	d006      	beq.n	800474c <UART_SetConfig+0x200>
 800473e:	e00b      	b.n	8004758 <UART_SetConfig+0x20c>
 8004740:	2300      	movs	r3, #0
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e00d      	b.n	8004762 <UART_SetConfig+0x216>
 8004746:	2302      	movs	r3, #2
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e00a      	b.n	8004762 <UART_SetConfig+0x216>
 800474c:	2304      	movs	r3, #4
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e007      	b.n	8004762 <UART_SetConfig+0x216>
 8004752:	2308      	movs	r3, #8
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e004      	b.n	8004762 <UART_SetConfig+0x216>
 8004758:	2310      	movs	r3, #16
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e001      	b.n	8004762 <UART_SetConfig+0x216>
 800475e:	2310      	movs	r3, #16
 8004760:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476a:	d15c      	bne.n	8004826 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800476c:	7ffb      	ldrb	r3, [r7, #31]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d827      	bhi.n	80047c2 <UART_SetConfig+0x276>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0x22c>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	0800479d 	.word	0x0800479d
 800477c:	080047a5 	.word	0x080047a5
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047c3 	.word	0x080047c3
 8004788:	080047b3 	.word	0x080047b3
 800478c:	080047c3 	.word	0x080047c3
 8004790:	080047c3 	.word	0x080047c3
 8004794:	080047c3 	.word	0x080047c3
 8004798:	080047bb 	.word	0x080047bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800479c:	f7fe fd00 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80047a0:	61b8      	str	r0, [r7, #24]
        break;
 80047a2:	e013      	b.n	80047cc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a4:	f7fe fd1e 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 80047a8:	61b8      	str	r0, [r7, #24]
        break;
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b34      	ldr	r3, [pc, #208]	; (8004880 <UART_SetConfig+0x334>)
 80047ae:	61bb      	str	r3, [r7, #24]
        break;
 80047b0:	e00c      	b.n	80047cc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7fe fc7f 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 80047b6:	61b8      	str	r0, [r7, #24]
        break;
 80047b8:	e008      	b.n	80047cc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e004      	b.n	80047cc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77bb      	strb	r3, [r7, #30]
        break;
 80047ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8084 	beq.w	80048dc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	005a      	lsls	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	441a      	add	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	d916      	bls.n	8004820 <UART_SetConfig+0x2d4>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d212      	bcs.n	8004820 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f023 030f 	bic.w	r3, r3, #15
 8004802:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	b29a      	uxth	r2, r3
 8004810:	89fb      	ldrh	r3, [r7, #14]
 8004812:	4313      	orrs	r3, r2
 8004814:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	89fa      	ldrh	r2, [r7, #14]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	e05d      	b.n	80048dc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	77bb      	strb	r3, [r7, #30]
 8004824:	e05a      	b.n	80048dc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004826:	7ffb      	ldrb	r3, [r7, #31]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d836      	bhi.n	800489a <UART_SetConfig+0x34e>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x2e8>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004885 	.word	0x08004885
 8004840:	0800489b 	.word	0x0800489b
 8004844:	0800488b 	.word	0x0800488b
 8004848:	0800489b 	.word	0x0800489b
 800484c:	0800489b 	.word	0x0800489b
 8004850:	0800489b 	.word	0x0800489b
 8004854:	08004893 	.word	0x08004893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7fe fca2 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 800485c:	61b8      	str	r0, [r7, #24]
        break;
 800485e:	e021      	b.n	80048a4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fe fcc0 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8004864:	61b8      	str	r0, [r7, #24]
        break;
 8004866:	e01d      	b.n	80048a4 <UART_SetConfig+0x358>
 8004868:	40013800 	.word	0x40013800
 800486c:	40021000 	.word	0x40021000
 8004870:	40004400 	.word	0x40004400
 8004874:	40004800 	.word	0x40004800
 8004878:	40004c00 	.word	0x40004c00
 800487c:	40005000 	.word	0x40005000
 8004880:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <UART_SetConfig+0x3a8>)
 8004886:	61bb      	str	r3, [r7, #24]
        break;
 8004888:	e00c      	b.n	80048a4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488a:	f7fe fc13 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800488e:	61b8      	str	r0, [r7, #24]
        break;
 8004890:	e008      	b.n	80048a4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004896:	61bb      	str	r3, [r7, #24]
        break;
 8004898:	e004      	b.n	80048a4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	77bb      	strb	r3, [r7, #30]
        break;
 80048a2:	bf00      	nop
    }

    if (pclk != 0U)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	085a      	lsrs	r2, r3, #1
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	441a      	add	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	b29b      	uxth	r3, r3
 80048be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0f      	cmp	r3, #15
 80048c4:	d908      	bls.n	80048d8 <UART_SetConfig+0x38c>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048cc:	d204      	bcs.n	80048d8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e001      	b.n	80048dc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3720      	adds	r7, #32
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	007a1200 	.word	0x007a1200

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fc f8d0 	bl	8000bf0 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10e      	bne.n	8004a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f82d 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e023      	b.n	8004ac6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d10e      	bne.n	8004aaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f817 	bl	8004ace <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e00d      	b.n	8004ac6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b09c      	sub	sp, #112	; 0x70
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ade:	e0a5      	b.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	f000 80a1 	beq.w	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fc f881 	bl	8000bf0 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x32>
 8004afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d13e      	bne.n	8004b7e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b14:	667b      	str	r3, [r7, #100]	; 0x64
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b52:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e067      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d04f      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9a:	d147      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	613b      	str	r3, [r7, #16]
   return(result);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bf8:	623a      	str	r2, [r7, #32]
 8004bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	69f9      	ldr	r1, [r7, #28]
 8004bfe:	6a3a      	ldr	r2, [r7, #32]
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e5      	bne.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e010      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	f43f af4a 	beq.w	8004ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3770      	adds	r7, #112	; 0x70
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5e:	f3ef 8305 	mrs	r3, IPSR
 8004c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6e:	607b      	str	r3, [r7, #4]
  return(result);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <osKernelInitialize+0x32>
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <osKernelInitialize+0x64>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d109      	bne.n	8004c92 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c82:	603b      	str	r3, [r7, #0]
  return(result);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004c8a:	f06f 0305 	mvn.w	r3, #5
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e00c      	b.n	8004cac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <osKernelInitialize+0x64>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <osKernelInitialize+0x64>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e002      	b.n	8004cac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	200001b4 	.word	0x200001b4

08004cc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc6:	f3ef 8305 	mrs	r3, IPSR
 8004cca:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ccc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10f      	bne.n	8004cf2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd6:	607b      	str	r3, [r7, #4]
  return(result);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <osKernelStart+0x32>
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <osKernelStart+0x64>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d109      	bne.n	8004cfa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cea:	603b      	str	r3, [r7, #0]
  return(result);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <osKernelStart+0x3a>
    stat = osErrorISR;
 8004cf2:	f06f 0305 	mvn.w	r3, #5
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e00e      	b.n	8004d18 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <osKernelStart+0x64>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <osKernelStart+0x64>)
 8004d04:	2202      	movs	r2, #2
 8004d06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004d08:	f001 f880 	bl	8005e0c <vTaskStartScheduler>
      stat = osOK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e002      	b.n	8004d18 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004d12:	f04f 33ff 	mov.w	r3, #4294967295
 8004d16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d18:	68fb      	ldr	r3, [r7, #12]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	200001b4 	.word	0x200001b4

08004d28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b092      	sub	sp, #72	; 0x48
 8004d2c:	af04      	add	r7, sp, #16
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d38:	f3ef 8305 	mrs	r3, IPSR
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f040 8094 	bne.w	8004e6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d46:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4a:	623b      	str	r3, [r7, #32]
  return(result);
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 808d 	bne.w	8004e6e <osThreadNew+0x146>
 8004d54:	4b48      	ldr	r3, [pc, #288]	; (8004e78 <osThreadNew+0x150>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d106      	bne.n	8004d6a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d60:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 8082 	bne.w	8004e6e <osThreadNew+0x146>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d07e      	beq.n	8004e6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004d74:	2318      	movs	r3, #24
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004d78:	2300      	movs	r3, #0
 8004d7a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004d7c:	f107 031b 	add.w	r3, r7, #27
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d045      	beq.n	8004e1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <osThreadNew+0x74>
        name = attr->name;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <osThreadNew+0x9a>
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	2b38      	cmp	r3, #56	; 0x38
 8004db4:	d805      	bhi.n	8004dc2 <osThreadNew+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <osThreadNew+0x9e>
        return (NULL);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e054      	b.n	8004e70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00e      	beq.n	8004dfc <osThreadNew+0xd4>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b5b      	cmp	r3, #91	; 0x5b
 8004de4:	d90a      	bls.n	8004dfc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <osThreadNew+0xd4>
        mem = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfa:	e010      	b.n	8004e1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10c      	bne.n	8004e1e <osThreadNew+0xf6>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d108      	bne.n	8004e1e <osThreadNew+0xf6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <osThreadNew+0xf6>
          mem = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e18:	e001      	b.n	8004e1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d110      	bne.n	8004e46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e2c:	9202      	str	r2, [sp, #8]
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fe1a 	bl	8005a74 <xTaskCreateStatic>
 8004e40:	4603      	mov	r3, r0
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e013      	b.n	8004e6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d110      	bne.n	8004e6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	f107 0314 	add.w	r3, r7, #20
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fe64 	bl	8005b2c <xTaskCreate>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <osThreadNew+0x146>
          hTask = NULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e6e:	697b      	ldr	r3, [r7, #20]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3738      	adds	r7, #56	; 0x38
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200001b4 	.word	0x200001b4

08004e7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e84:	f3ef 8305 	mrs	r3, IPSR
 8004e88:	613b      	str	r3, [r7, #16]
  return(result);
 8004e8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10f      	bne.n	8004eb0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e90:	f3ef 8310 	mrs	r3, PRIMASK
 8004e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <osDelay+0x34>
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ed4 <osDelay+0x58>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d109      	bne.n	8004eb8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <osDelay+0x3c>
    stat = osErrorISR;
 8004eb0:	f06f 0305 	mvn.w	r3, #5
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e007      	b.n	8004ec8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 ff6e 	bl	8005da4 <vTaskDelay>
    }
  }

  return (stat);
 8004ec8:	697b      	ldr	r3, [r7, #20]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200001b4 	.word	0x200001b4

08004ed8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a07      	ldr	r2, [pc, #28]	; (8004f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a06      	ldr	r2, [pc, #24]	; (8004f08 <vApplicationGetIdleTaskMemory+0x30>)
 8004eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2280      	movs	r2, #128	; 0x80
 8004ef4:	601a      	str	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	200001b8 	.word	0x200001b8
 8004f08:	20000214 	.word	0x20000214

08004f0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <vApplicationGetTimerTaskMemory+0x30>)
 8004f22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f2a:	601a      	str	r2, [r3, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000414 	.word	0x20000414
 8004f3c:	20000470 	.word	0x20000470

08004f40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f103 0208 	add.w	r2, r3, #8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 0208 	add.w	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f103 0208 	add.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d103      	bne.n	8005002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e00c      	b.n	800501c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3308      	adds	r3, #8
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <vListInsert+0x2e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	429a      	cmp	r2, r3
 800501a:	d2f6      	bcs.n	800500a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	601a      	str	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6852      	ldr	r2, [r2, #4]
 8005074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	429a      	cmp	r2, r3
 800507e:	d103      	bne.n	8005088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050d2:	f002 f80f 	bl	80070f4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050e2:	fb01 f303 	mul.w	r3, r1, r3
 80050e6:	441a      	add	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	3b01      	subs	r3, #1
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005108:	fb01 f303 	mul.w	r3, r1, r3
 800510c:	441a      	add	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d114      	bne.n	8005152 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01a      	beq.n	8005166 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3310      	adds	r3, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f8f7 	bl	8006328 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d012      	beq.n	8005166 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <xQueueGenericReset+0xcc>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	e009      	b.n	8005166 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3310      	adds	r3, #16
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fef2 	bl	8004f40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3324      	adds	r3, #36	; 0x24
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff feed 	bl	8004f40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f001 fff5 	bl	8007154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800516a:	2301      	movs	r3, #1
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	; 0x38
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <xQueueGenericCreateStatic+0x52>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <xQueueGenericCreateStatic+0x56>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <xQueueGenericCreateStatic+0x58>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	623b      	str	r3, [r7, #32]
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <xQueueGenericCreateStatic+0x7e>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <xQueueGenericCreateStatic+0x82>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <xQueueGenericCreateStatic+0x84>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	61fb      	str	r3, [r7, #28]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005216:	2350      	movs	r3, #80	; 0x50
 8005218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b50      	cmp	r3, #80	; 0x50
 800521e:	d00a      	beq.n	8005236 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61bb      	str	r3, [r7, #24]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800523a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005248:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	4613      	mov	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f805 	bl	8005266 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800525e:	4618      	mov	r0, r3
 8005260:	3730      	adds	r7, #48	; 0x30
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e002      	b.n	8005288 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005294:	2101      	movs	r1, #1
 8005296:	69b8      	ldr	r0, [r7, #24]
 8005298:	f7ff ff06 	bl	80050a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08e      	sub	sp, #56	; 0x38
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052ba:	2300      	movs	r3, #0
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xQueueGenericSend+0x32>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d103      	bne.n	80052ec <xQueueGenericSend+0x40>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <xQueueGenericSend+0x44>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <xQueueGenericSend+0x46>
 80052f0:	2300      	movs	r3, #0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <xQueueGenericSend+0x60>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d103      	bne.n	800531a <xQueueGenericSend+0x6e>
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <xQueueGenericSend+0x72>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <xQueueGenericSend+0x74>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <xQueueGenericSend+0x8e>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	623b      	str	r3, [r7, #32]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800533a:	f001 f9b9 	bl	80066b0 <xTaskGetSchedulerState>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <xQueueGenericSend+0x9e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <xQueueGenericSend+0xa2>
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <xQueueGenericSend+0xa4>
 800534e:	2300      	movs	r3, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xQueueGenericSend+0xbe>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	61fb      	str	r3, [r7, #28]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800536a:	f001 fec3 	bl	80070f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <xQueueGenericSend+0xd4>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d129      	bne.n	80053d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005386:	f000 fa07 	bl	8005798 <prvCopyDataToQueue>
 800538a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	3324      	adds	r3, #36	; 0x24
 8005398:	4618      	mov	r0, r3
 800539a:	f000 ffc5 	bl	8006328 <xTaskRemoveFromEventList>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d013      	beq.n	80053cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053a4:	4b3f      	ldr	r3, [pc, #252]	; (80054a4 <xQueueGenericSend+0x1f8>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	e00a      	b.n	80053cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053bc:	4b39      	ldr	r3, [pc, #228]	; (80054a4 <xQueueGenericSend+0x1f8>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053cc:	f001 fec2 	bl	8007154 <vPortExitCritical>
				return pdPASS;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e063      	b.n	800549c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d103      	bne.n	80053e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053da:	f001 febb 	bl	8007154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	e05c      	b.n	800549c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053e8:	f107 0314 	add.w	r3, r7, #20
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 ffff 	bl	80063f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053f2:	2301      	movs	r3, #1
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053f6:	f001 fead 	bl	8007154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053fa:	f000 fd6d 	bl	8005ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053fe:	f001 fe79 	bl	80070f4 <vPortEnterCritical>
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005408:	b25b      	sxtb	r3, r3
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d103      	bne.n	8005418 <xQueueGenericSend+0x16c>
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800541e:	b25b      	sxtb	r3, r3
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d103      	bne.n	800542e <xQueueGenericSend+0x182>
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800542e:	f001 fe91 	bl	8007154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005432:	1d3a      	adds	r2, r7, #4
 8005434:	f107 0314 	add.w	r3, r7, #20
 8005438:	4611      	mov	r1, r2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 ffee 	bl	800641c <xTaskCheckForTimeOut>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d124      	bne.n	8005490 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005448:	f000 fa9e 	bl	8005988 <prvIsQueueFull>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d018      	beq.n	8005484 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	3310      	adds	r3, #16
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f000 ff14 	bl	8006288 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005462:	f000 fa29 	bl	80058b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005466:	f000 fd45 	bl	8005ef4 <xTaskResumeAll>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f af7c 	bne.w	800536a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <xQueueGenericSend+0x1f8>)
 8005474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	e772      	b.n	800536a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005486:	f000 fa17 	bl	80058b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800548a:	f000 fd33 	bl	8005ef4 <xTaskResumeAll>
 800548e:	e76c      	b.n	800536a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005492:	f000 fa11 	bl	80058b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005496:	f000 fd2d 	bl	8005ef4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800549a:	2300      	movs	r3, #0
		}
	}
}
 800549c:	4618      	mov	r0, r3
 800549e:	3738      	adds	r7, #56	; 0x38
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08e      	sub	sp, #56	; 0x38
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <xQueueGenericSendFromISR+0x3c>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <xQueueGenericSendFromISR+0x40>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <xQueueGenericSendFromISR+0x42>
 80054e8:	2300      	movs	r3, #0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10a      	bne.n	8005504 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	623b      	str	r3, [r7, #32]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d103      	bne.n	8005512 <xQueueGenericSendFromISR+0x6a>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <xQueueGenericSendFromISR+0x6e>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueGenericSendFromISR+0x70>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	61fb      	str	r3, [r7, #28]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005532:	f001 fec1 	bl	80072b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005536:	f3ef 8211 	mrs	r2, BASEPRI
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	61ba      	str	r2, [r7, #24]
 800554c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800554e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <xQueueGenericSendFromISR+0xbc>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d12c      	bne.n	80055be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005574:	f000 f910 	bl	8005798 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005578:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d112      	bne.n	80055a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	3324      	adds	r3, #36	; 0x24
 800558e:	4618      	mov	r0, r3
 8005590:	f000 feca 	bl	8006328 <xTaskRemoveFromEventList>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00e      	beq.n	80055b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e007      	b.n	80055b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055ac:	3301      	adds	r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	b25a      	sxtb	r2, r3
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055b8:	2301      	movs	r3, #1
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80055bc:	e001      	b.n	80055c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	; 0x34
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3738      	adds	r7, #56	; 0x38
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08c      	sub	sp, #48	; 0x30
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055e4:	2300      	movs	r3, #0
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <xQueueReceive+0x30>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	623b      	str	r3, [r7, #32]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <xQueueReceive+0x3e>
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueReceive+0x42>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueReceive+0x44>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <xQueueReceive+0x5e>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61fb      	str	r3, [r7, #28]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005636:	f001 f83b 	bl	80066b0 <xTaskGetSchedulerState>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d102      	bne.n	8005646 <xQueueReceive+0x6e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <xQueueReceive+0x72>
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <xQueueReceive+0x74>
 800564a:	2300      	movs	r3, #0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <xQueueReceive+0x8e>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	61bb      	str	r3, [r7, #24]
}
 8005662:	bf00      	nop
 8005664:	e7fe      	b.n	8005664 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005666:	f001 fd45 	bl	80070f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01f      	beq.n	80056b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800567a:	f000 f8f7 	bl	800586c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	1e5a      	subs	r2, r3, #1
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00f      	beq.n	80056ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	3310      	adds	r3, #16
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fe48 	bl	8006328 <xTaskRemoveFromEventList>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800569e:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <xQueueReceive+0x1bc>)
 80056a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056ae:	f001 fd51 	bl	8007154 <vPortExitCritical>
				return pdPASS;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e069      	b.n	800578a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d103      	bne.n	80056c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056bc:	f001 fd4a 	bl	8007154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e062      	b.n	800578a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ca:	f107 0310 	add.w	r3, r7, #16
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fe8e 	bl	80063f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056d8:	f001 fd3c 	bl	8007154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056dc:	f000 fbfc 	bl	8005ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056e0:	f001 fd08 	bl	80070f4 <vPortEnterCritical>
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ea:	b25b      	sxtb	r3, r3
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d103      	bne.n	80056fa <xQueueReceive+0x122>
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005700:	b25b      	sxtb	r3, r3
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d103      	bne.n	8005710 <xQueueReceive+0x138>
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005710:	f001 fd20 	bl	8007154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005714:	1d3a      	adds	r2, r7, #4
 8005716:	f107 0310 	add.w	r3, r7, #16
 800571a:	4611      	mov	r1, r2
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fe7d 	bl	800641c <xTaskCheckForTimeOut>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d123      	bne.n	8005770 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800572a:	f000 f917 	bl	800595c <prvIsQueueEmpty>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d017      	beq.n	8005764 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	3324      	adds	r3, #36	; 0x24
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fda3 	bl	8006288 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005744:	f000 f8b8 	bl	80058b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005748:	f000 fbd4 	bl	8005ef4 <xTaskResumeAll>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d189      	bne.n	8005666 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <xQueueReceive+0x1bc>)
 8005754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	e780      	b.n	8005666 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005766:	f000 f8a7 	bl	80058b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800576a:	f000 fbc3 	bl	8005ef4 <xTaskResumeAll>
 800576e:	e77a      	b.n	8005666 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005772:	f000 f8a1 	bl	80058b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005776:	f000 fbbd 	bl	8005ef4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800577a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800577c:	f000 f8ee 	bl	800595c <prvIsQueueEmpty>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	f43f af6f 	beq.w	8005666 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005788:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800578a:	4618      	mov	r0, r3
 800578c:	3730      	adds	r7, #48	; 0x30
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d14d      	bne.n	800585a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 ff92 	bl	80066ec <xTaskPriorityDisinherit>
 80057c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	605a      	str	r2, [r3, #4]
 80057d0:	e043      	b.n	800585a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d119      	bne.n	800580c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6898      	ldr	r0, [r3, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e0:	461a      	mov	r2, r3
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	f001 ffa6 	bl	8007734 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d32b      	bcc.n	800585a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	609a      	str	r2, [r3, #8]
 800580a:	e026      	b.n	800585a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68d8      	ldr	r0, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	461a      	mov	r2, r3
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	f001 ff8c 	bl	8007734 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	425b      	negs	r3, r3
 8005826:	441a      	add	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d207      	bcs.n	8005848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	425b      	negs	r3, r3
 8005842:	441a      	add	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d105      	bne.n	800585a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3b01      	subs	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005862:	697b      	ldr	r3, [r7, #20]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	441a      	add	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d303      	bcc.n	80058a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68d9      	ldr	r1, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	461a      	mov	r2, r3
 80058aa:	6838      	ldr	r0, [r7, #0]
 80058ac:	f001 ff42 	bl	8007734 <memcpy>
	}
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058c0:	f001 fc18 	bl	80070f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058cc:	e011      	b.n	80058f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d012      	beq.n	80058fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3324      	adds	r3, #36	; 0x24
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fd24 	bl	8006328 <xTaskRemoveFromEventList>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058e6:	f000 fdfb 	bl	80064e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dce9      	bgt.n	80058ce <prvUnlockQueue+0x16>
 80058fa:	e000      	b.n	80058fe <prvUnlockQueue+0x46>
					break;
 80058fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	22ff      	movs	r2, #255	; 0xff
 8005902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005906:	f001 fc25 	bl	8007154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800590a:	f001 fbf3 	bl	80070f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005916:	e011      	b.n	800593c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3310      	adds	r3, #16
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fcff 	bl	8006328 <xTaskRemoveFromEventList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005930:	f000 fdd6 	bl	80064e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	3b01      	subs	r3, #1
 8005938:	b2db      	uxtb	r3, r3
 800593a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800593c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005940:	2b00      	cmp	r3, #0
 8005942:	dce9      	bgt.n	8005918 <prvUnlockQueue+0x60>
 8005944:	e000      	b.n	8005948 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005946:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	22ff      	movs	r2, #255	; 0xff
 800594c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005950:	f001 fc00 	bl	8007154 <vPortExitCritical>
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005964:	f001 fbc6 	bl	80070f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	2b00      	cmp	r3, #0
 800596e:	d102      	bne.n	8005976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e001      	b.n	800597a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800597a:	f001 fbeb 	bl	8007154 <vPortExitCritical>

	return xReturn;
 800597e:	68fb      	ldr	r3, [r7, #12]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005990:	f001 fbb0 	bl	80070f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599c:	429a      	cmp	r2, r3
 800599e:	d102      	bne.n	80059a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e001      	b.n	80059aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059aa:	f001 fbd3 	bl	8007154 <vPortExitCritical>

	return xReturn;
 80059ae:	68fb      	ldr	r3, [r7, #12]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e014      	b.n	80059f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059c8:	4a0f      	ldr	r2, [pc, #60]	; (8005a08 <vQueueAddToRegistry+0x50>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059d4:	490c      	ldr	r1, [pc, #48]	; (8005a08 <vQueueAddToRegistry+0x50>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059de:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <vQueueAddToRegistry+0x50>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4413      	add	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ea:	e006      	b.n	80059fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3301      	adds	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b07      	cmp	r3, #7
 80059f6:	d9e7      	bls.n	80059c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000870 	.word	0x20000870

08005a0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a1c:	f001 fb6a 	bl	80070f4 <vPortEnterCritical>
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a26:	b25b      	sxtb	r3, r3
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d103      	bne.n	8005a36 <vQueueWaitForMessageRestricted+0x2a>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d103      	bne.n	8005a4c <vQueueWaitForMessageRestricted+0x40>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a4c:	f001 fb82 	bl	8007154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	3324      	adds	r3, #36	; 0x24
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fc35 	bl	80062d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a66:	6978      	ldr	r0, [r7, #20]
 8005a68:	f7ff ff26 	bl	80058b8 <prvUnlockQueue>
	}
 8005a6c:	bf00      	nop
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	; 0x38
 8005a78:	af04      	add	r7, sp, #16
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	623b      	str	r3, [r7, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10a      	bne.n	8005aba <xTaskCreateStatic+0x46>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	61fb      	str	r3, [r7, #28]
}
 8005ab6:	bf00      	nop
 8005ab8:	e7fe      	b.n	8005ab8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aba:	235c      	movs	r3, #92	; 0x5c
 8005abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8005ac2:	d00a      	beq.n	8005ada <xTaskCreateStatic+0x66>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	61bb      	str	r3, [r7, #24]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01e      	beq.n	8005b1e <xTaskCreateStatic+0xaa>
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01b      	beq.n	8005b1e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005af8:	2300      	movs	r3, #0
 8005afa:	9303      	str	r3, [sp, #12]
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	9302      	str	r3, [sp, #8]
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f850 	bl	8005bb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b18:	f000 f8d4 	bl	8005cc4 <prvAddNewTaskToReadyList>
 8005b1c:	e001      	b.n	8005b22 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b22:	697b      	ldr	r3, [r7, #20]
	}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3728      	adds	r7, #40	; 0x28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08c      	sub	sp, #48	; 0x30
 8005b30:	af04      	add	r7, sp, #16
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fbf9 	bl	8007338 <pvPortMalloc>
 8005b46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b4e:	205c      	movs	r0, #92	; 0x5c
 8005b50:	f001 fbf2 	bl	8007338 <pvPortMalloc>
 8005b54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
 8005b62:	e005      	b.n	8005b70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b64:	6978      	ldr	r0, [r7, #20]
 8005b66:	f001 fcab 	bl	80074c0 <vPortFree>
 8005b6a:	e001      	b.n	8005b70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d017      	beq.n	8005ba6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	2300      	movs	r3, #0
 8005b82:	9303      	str	r3, [sp, #12]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	9302      	str	r3, [sp, #8]
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f80e 	bl	8005bb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b9a:	69f8      	ldr	r0, [r7, #28]
 8005b9c:	f000 f892 	bl	8005cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e002      	b.n	8005bac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bac:	69bb      	ldr	r3, [r7, #24]
	}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b088      	sub	sp, #32
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	461a      	mov	r2, r3
 8005bce:	21a5      	movs	r1, #165	; 0xa5
 8005bd0:	f001 fdbe 	bl	8007750 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bde:	3b01      	subs	r3, #1
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f023 0307 	bic.w	r3, r3, #7
 8005bec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	617b      	str	r3, [r7, #20]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e012      	b.n	8005c3a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	7819      	ldrb	r1, [r3, #0]
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	3334      	adds	r3, #52	; 0x34
 8005c24:	460a      	mov	r2, r1
 8005c26:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d006      	beq.n	8005c42 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	2b0f      	cmp	r3, #15
 8005c3e:	d9e9      	bls.n	8005c14 <prvInitialiseNewTask+0x5e>
 8005c40:	e000      	b.n	8005c44 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005c42:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	2b37      	cmp	r3, #55	; 0x37
 8005c50:	d901      	bls.n	8005c56 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c52:	2337      	movs	r3, #55	; 0x37
 8005c54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	2200      	movs	r2, #0
 8005c66:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff f987 	bl	8004f80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	3318      	adds	r3, #24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7ff f982 	bl	8004f80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	2200      	movs	r2, #0
 8005c96:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	68f9      	ldr	r1, [r7, #12]
 8005ca4:	69b8      	ldr	r0, [r7, #24]
 8005ca6:	f001 f8f5 	bl	8006e94 <pxPortInitialiseStack>
 8005caa:	4602      	mov	r2, r0
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cbc:	bf00      	nop
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ccc:	f001 fa12 	bl	80070f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	; (8005d88 <prvAddNewTaskToReadyList+0xc4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	; (8005d88 <prvAddNewTaskToReadyList+0xc4>)
 8005cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cda:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ce2:	4a2a      	ldr	r2, [pc, #168]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ce8:	4b27      	ldr	r3, [pc, #156]	; (8005d88 <prvAddNewTaskToReadyList+0xc4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d110      	bne.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cf0:	f000 fc1a 	bl	8006528 <prvInitialiseTaskLists>
 8005cf4:	e00d      	b.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cf6:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <prvAddNewTaskToReadyList+0xcc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d802      	bhi.n	8005d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <prvAddNewTaskToReadyList+0xd0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3301      	adds	r3, #1
 8005d18:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <prvAddNewTaskToReadyList+0xd0>)
 8005d1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <prvAddNewTaskToReadyList+0xd0>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <prvAddNewTaskToReadyList+0xd4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d903      	bls.n	8005d38 <prvAddNewTaskToReadyList+0x74>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	4a18      	ldr	r2, [pc, #96]	; (8005d98 <prvAddNewTaskToReadyList+0xd4>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <prvAddNewTaskToReadyList+0xd8>)
 8005d46:	441a      	add	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7ff f923 	bl	8004f9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d54:	f001 f9fe 	bl	8007154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <prvAddNewTaskToReadyList+0xcc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00e      	beq.n	8005d7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d60:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <prvAddNewTaskToReadyList+0xc8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d207      	bcs.n	8005d7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <prvAddNewTaskToReadyList+0xdc>)
 8005d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000d84 	.word	0x20000d84
 8005d8c:	200008b0 	.word	0x200008b0
 8005d90:	20000d90 	.word	0x20000d90
 8005d94:	20000da0 	.word	0x20000da0
 8005d98:	20000d8c 	.word	0x20000d8c
 8005d9c:	200008b4 	.word	0x200008b4
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d017      	beq.n	8005de6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <vTaskDelay+0x60>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <vTaskDelay+0x30>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60bb      	str	r3, [r7, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dd4:	f000 f880 	bl	8005ed8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dd8:	2100      	movs	r1, #0
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fcf4 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005de0:	f000 f888 	bl	8005ef4 <xTaskResumeAll>
 8005de4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <vTaskDelay+0x64>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000dac 	.word	0x20000dac
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	1d39      	adds	r1, r7, #4
 8005e1e:	f107 0308 	add.w	r3, r7, #8
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f858 	bl	8004ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	9202      	str	r2, [sp, #8]
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	2300      	movs	r3, #0
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	2300      	movs	r3, #0
 8005e38:	460a      	mov	r2, r1
 8005e3a:	4921      	ldr	r1, [pc, #132]	; (8005ec0 <vTaskStartScheduler+0xb4>)
 8005e3c:	4821      	ldr	r0, [pc, #132]	; (8005ec4 <vTaskStartScheduler+0xb8>)
 8005e3e:	f7ff fe19 	bl	8005a74 <xTaskCreateStatic>
 8005e42:	4603      	mov	r3, r0
 8005e44:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <vTaskStartScheduler+0xbc>)
 8005e46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e48:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <vTaskStartScheduler+0xbc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e001      	b.n	8005e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e60:	f000 fd06 	bl	8006870 <xTimerCreateTimerTask>
 8005e64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d116      	bne.n	8005e9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	613b      	str	r3, [r7, #16]
}
 8005e7e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <vTaskStartScheduler+0xc0>)
 8005e82:	f04f 32ff 	mov.w	r2, #4294967295
 8005e86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <vTaskStartScheduler+0xc4>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <vTaskStartScheduler+0xc8>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e94:	f001 f88c 	bl	8006fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e98:	e00e      	b.n	8005eb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d10a      	bne.n	8005eb8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <vTaskStartScheduler+0xaa>
}
 8005eb8:	bf00      	nop
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	080077ac 	.word	0x080077ac
 8005ec4:	080064f9 	.word	0x080064f9
 8005ec8:	20000da8 	.word	0x20000da8
 8005ecc:	20000da4 	.word	0x20000da4
 8005ed0:	20000d90 	.word	0x20000d90
 8005ed4:	20000d88 	.word	0x20000d88

08005ed8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <vTaskSuspendAll+0x18>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a03      	ldr	r2, [pc, #12]	; (8005ef0 <vTaskSuspendAll+0x18>)
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000dac 	.word	0x20000dac

08005ef4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f02:	4b42      	ldr	r3, [pc, #264]	; (800600c <xTaskResumeAll+0x118>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	603b      	str	r3, [r7, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f20:	f001 f8e8 	bl	80070f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f24:	4b39      	ldr	r3, [pc, #228]	; (800600c <xTaskResumeAll+0x118>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	4a38      	ldr	r2, [pc, #224]	; (800600c <xTaskResumeAll+0x118>)
 8005f2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2e:	4b37      	ldr	r3, [pc, #220]	; (800600c <xTaskResumeAll+0x118>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d162      	bne.n	8005ffc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f36:	4b36      	ldr	r3, [pc, #216]	; (8006010 <xTaskResumeAll+0x11c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d05e      	beq.n	8005ffc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f3e:	e02f      	b.n	8005fa0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f40:	4b34      	ldr	r3, [pc, #208]	; (8006014 <xTaskResumeAll+0x120>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3318      	adds	r3, #24
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff f881 	bl	8005054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff f87c 	bl	8005054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f60:	4b2d      	ldr	r3, [pc, #180]	; (8006018 <xTaskResumeAll+0x124>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d903      	bls.n	8005f70 <xTaskResumeAll+0x7c>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <xTaskResumeAll+0x124>)
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <xTaskResumeAll+0x128>)
 8005f7e:	441a      	add	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f7ff f807 	bl	8004f9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	4b23      	ldr	r3, [pc, #140]	; (8006020 <xTaskResumeAll+0x12c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f9a:	4b22      	ldr	r3, [pc, #136]	; (8006024 <xTaskResumeAll+0x130>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fa0:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <xTaskResumeAll+0x120>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1cb      	bne.n	8005f40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fae:	f000 fb59 	bl	8006664 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <xTaskResumeAll+0x134>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d010      	beq.n	8005fe0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fbe:	f000 f847 	bl	8006050 <xTaskIncrementTick>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fc8:	4b16      	ldr	r3, [pc, #88]	; (8006024 <xTaskResumeAll+0x130>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f1      	bne.n	8005fbe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005fda:	4b13      	ldr	r3, [pc, #76]	; (8006028 <xTaskResumeAll+0x134>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fe0:	4b10      	ldr	r3, [pc, #64]	; (8006024 <xTaskResumeAll+0x130>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d009      	beq.n	8005ffc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <xTaskResumeAll+0x138>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ffc:	f001 f8aa 	bl	8007154 <vPortExitCritical>

	return xAlreadyYielded;
 8006000:	68bb      	ldr	r3, [r7, #8]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000dac 	.word	0x20000dac
 8006010:	20000d84 	.word	0x20000d84
 8006014:	20000d44 	.word	0x20000d44
 8006018:	20000d8c 	.word	0x20000d8c
 800601c:	200008b4 	.word	0x200008b4
 8006020:	200008b0 	.word	0x200008b0
 8006024:	20000d98 	.word	0x20000d98
 8006028:	20000d94 	.word	0x20000d94
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <xTaskGetTickCount+0x1c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800603c:	687b      	ldr	r3, [r7, #4]
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000d88 	.word	0x20000d88

08006050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800605a:	4b51      	ldr	r3, [pc, #324]	; (80061a0 <xTaskIncrementTick+0x150>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 808e 	bne.w	8006180 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006064:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <xTaskIncrementTick+0x154>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800606c:	4a4d      	ldr	r2, [pc, #308]	; (80061a4 <xTaskIncrementTick+0x154>)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d120      	bne.n	80060ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006078:	4b4b      	ldr	r3, [pc, #300]	; (80061a8 <xTaskIncrementTick+0x158>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <xTaskIncrementTick+0x48>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	603b      	str	r3, [r7, #0]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xTaskIncrementTick+0x46>
 8006098:	4b43      	ldr	r3, [pc, #268]	; (80061a8 <xTaskIncrementTick+0x158>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	4b43      	ldr	r3, [pc, #268]	; (80061ac <xTaskIncrementTick+0x15c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a41      	ldr	r2, [pc, #260]	; (80061a8 <xTaskIncrementTick+0x158>)
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	4a41      	ldr	r2, [pc, #260]	; (80061ac <xTaskIncrementTick+0x15c>)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <xTaskIncrementTick+0x160>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3301      	adds	r3, #1
 80060b2:	4a3f      	ldr	r2, [pc, #252]	; (80061b0 <xTaskIncrementTick+0x160>)
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	f000 fad5 	bl	8006664 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ba:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <xTaskIncrementTick+0x164>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d34e      	bcc.n	8006162 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060c4:	4b38      	ldr	r3, [pc, #224]	; (80061a8 <xTaskIncrementTick+0x158>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <xTaskIncrementTick+0x82>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <xTaskIncrementTick+0x84>
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d004      	beq.n	80060e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d8:	4b36      	ldr	r3, [pc, #216]	; (80061b4 <xTaskIncrementTick+0x164>)
 80060da:	f04f 32ff 	mov.w	r2, #4294967295
 80060de:	601a      	str	r2, [r3, #0]
					break;
 80060e0:	e03f      	b.n	8006162 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060e2:	4b31      	ldr	r3, [pc, #196]	; (80061a8 <xTaskIncrementTick+0x158>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d203      	bcs.n	8006102 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060fa:	4a2e      	ldr	r2, [pc, #184]	; (80061b4 <xTaskIncrementTick+0x164>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6013      	str	r3, [r2, #0]
						break;
 8006100:	e02f      	b.n	8006162 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	3304      	adds	r3, #4
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe ffa4 	bl	8005054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	3318      	adds	r3, #24
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe ff9b 	bl	8005054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006122:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <xTaskIncrementTick+0x168>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d903      	bls.n	8006132 <xTaskIncrementTick+0xe2>
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <xTaskIncrementTick+0x168>)
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <xTaskIncrementTick+0x16c>)
 8006140:	441a      	add	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7fe ff26 	bl	8004f9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006152:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <xTaskIncrementTick+0x170>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006158:	429a      	cmp	r2, r3
 800615a:	d3b3      	bcc.n	80060c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006160:	e7b0      	b.n	80060c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006162:	4b17      	ldr	r3, [pc, #92]	; (80061c0 <xTaskIncrementTick+0x170>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006168:	4914      	ldr	r1, [pc, #80]	; (80061bc <xTaskIncrementTick+0x16c>)
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d907      	bls.n	800618a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800617a:	2301      	movs	r3, #1
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e004      	b.n	800618a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <xTaskIncrementTick+0x174>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3301      	adds	r3, #1
 8006186:	4a0f      	ldr	r2, [pc, #60]	; (80061c4 <xTaskIncrementTick+0x174>)
 8006188:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <xTaskIncrementTick+0x178>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006192:	2301      	movs	r3, #1
 8006194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006196:	697b      	ldr	r3, [r7, #20]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000dac 	.word	0x20000dac
 80061a4:	20000d88 	.word	0x20000d88
 80061a8:	20000d3c 	.word	0x20000d3c
 80061ac:	20000d40 	.word	0x20000d40
 80061b0:	20000d9c 	.word	0x20000d9c
 80061b4:	20000da4 	.word	0x20000da4
 80061b8:	20000d8c 	.word	0x20000d8c
 80061bc:	200008b4 	.word	0x200008b4
 80061c0:	200008b0 	.word	0x200008b0
 80061c4:	20000d94 	.word	0x20000d94
 80061c8:	20000d98 	.word	0x20000d98

080061cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061d2:	4b28      	ldr	r3, [pc, #160]	; (8006274 <vTaskSwitchContext+0xa8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061da:	4b27      	ldr	r3, [pc, #156]	; (8006278 <vTaskSwitchContext+0xac>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061e0:	e041      	b.n	8006266 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80061e2:	4b25      	ldr	r3, [pc, #148]	; (8006278 <vTaskSwitchContext+0xac>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80061e8:	4b24      	ldr	r3, [pc, #144]	; (800627c <vTaskSwitchContext+0xb0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e010      	b.n	8006212 <vTaskSwitchContext+0x46>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <vTaskSwitchContext+0x40>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	607b      	str	r3, [r7, #4]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <vTaskSwitchContext+0x3e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3b01      	subs	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	491b      	ldr	r1, [pc, #108]	; (8006280 <vTaskSwitchContext+0xb4>)
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0e4      	beq.n	80061f0 <vTaskSwitchContext+0x24>
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <vTaskSwitchContext+0xb4>)
 8006232:	4413      	add	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	3308      	adds	r3, #8
 8006248:	429a      	cmp	r2, r3
 800624a:	d104      	bne.n	8006256 <vTaskSwitchContext+0x8a>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a09      	ldr	r2, [pc, #36]	; (8006284 <vTaskSwitchContext+0xb8>)
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	4a06      	ldr	r2, [pc, #24]	; (800627c <vTaskSwitchContext+0xb0>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6013      	str	r3, [r2, #0]
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000dac 	.word	0x20000dac
 8006278:	20000d98 	.word	0x20000d98
 800627c:	20000d8c 	.word	0x20000d8c
 8006280:	200008b4 	.word	0x200008b4
 8006284:	200008b0 	.word	0x200008b0

08006288 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	60fb      	str	r3, [r7, #12]
}
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062ae:	4b07      	ldr	r3, [pc, #28]	; (80062cc <vTaskPlaceOnEventList+0x44>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3318      	adds	r3, #24
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fe fe93 	bl	8004fe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062bc:	2101      	movs	r1, #1
 80062be:	6838      	ldr	r0, [r7, #0]
 80062c0:	f000 fa82 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	200008b0 	.word	0x200008b0

080062d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	617b      	str	r3, [r7, #20]
}
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <vTaskPlaceOnEventListRestricted+0x54>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3318      	adds	r3, #24
 80062fe:	4619      	mov	r1, r3
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7fe fe4a 	bl	8004f9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	68b8      	ldr	r0, [r7, #8]
 8006316:	f000 fa57 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
	}
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	200008b0 	.word	0x200008b0

08006328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60fb      	str	r3, [r7, #12]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	3318      	adds	r3, #24
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fe7b 	bl	8005054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800635e:	4b1e      	ldr	r3, [pc, #120]	; (80063d8 <xTaskRemoveFromEventList+0xb0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11d      	bne.n	80063a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3304      	adds	r3, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fe72 	bl	8005054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	4b19      	ldr	r3, [pc, #100]	; (80063dc <xTaskRemoveFromEventList+0xb4>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d903      	bls.n	8006384 <xTaskRemoveFromEventList+0x5c>
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006380:	4a16      	ldr	r2, [pc, #88]	; (80063dc <xTaskRemoveFromEventList+0xb4>)
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4a13      	ldr	r2, [pc, #76]	; (80063e0 <xTaskRemoveFromEventList+0xb8>)
 8006392:	441a      	add	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3304      	adds	r3, #4
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7fe fdfd 	bl	8004f9a <vListInsertEnd>
 80063a0:	e005      	b.n	80063ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	3318      	adds	r3, #24
 80063a6:	4619      	mov	r1, r3
 80063a8:	480e      	ldr	r0, [pc, #56]	; (80063e4 <xTaskRemoveFromEventList+0xbc>)
 80063aa:	f7fe fdf6 	bl	8004f9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <xTaskRemoveFromEventList+0xc0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d905      	bls.n	80063c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063bc:	2301      	movs	r3, #1
 80063be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <xTaskRemoveFromEventList+0xc4>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	e001      	b.n	80063cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063cc:	697b      	ldr	r3, [r7, #20]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000dac 	.word	0x20000dac
 80063dc:	20000d8c 	.word	0x20000d8c
 80063e0:	200008b4 	.word	0x200008b4
 80063e4:	20000d44 	.word	0x20000d44
 80063e8:	200008b0 	.word	0x200008b0
 80063ec:	20000d98 	.word	0x20000d98

080063f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063f8:	4b06      	ldr	r3, [pc, #24]	; (8006414 <vTaskInternalSetTimeOutState+0x24>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <vTaskInternalSetTimeOutState+0x28>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	605a      	str	r2, [r3, #4]
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000d9c 	.word	0x20000d9c
 8006418:	20000d88 	.word	0x20000d88

0800641c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	613b      	str	r3, [r7, #16]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800645e:	f000 fe49 	bl	80070f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006462:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <xTaskCheckForTimeOut+0xbc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d102      	bne.n	8006482 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e023      	b.n	80064ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b15      	ldr	r3, [pc, #84]	; (80064dc <xTaskCheckForTimeOut+0xc0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d007      	beq.n	800649e <xTaskCheckForTimeOut+0x82>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e015      	b.n	80064ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d20b      	bcs.n	80064c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff9b 	bl	80063f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	e004      	b.n	80064ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064c6:	2301      	movs	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064ca:	f000 fe43 	bl	8007154 <vPortExitCritical>

	return xReturn;
 80064ce:	69fb      	ldr	r3, [r7, #28]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000d88 	.word	0x20000d88
 80064dc:	20000d9c 	.word	0x20000d9c

080064e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <vTaskMissedYield+0x14>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
}
 80064ea:	bf00      	nop
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20000d98 	.word	0x20000d98

080064f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006500:	f000 f852 	bl	80065a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <prvIdleTask+0x28>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d9f9      	bls.n	8006500 <prvIdleTask+0x8>
			{
				taskYIELD();
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <prvIdleTask+0x2c>)
 800650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800651c:	e7f0      	b.n	8006500 <prvIdleTask+0x8>
 800651e:	bf00      	nop
 8006520:	200008b4 	.word	0x200008b4
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	e00c      	b.n	800654e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4a12      	ldr	r2, [pc, #72]	; (8006588 <prvInitialiseTaskLists+0x60>)
 8006540:	4413      	add	r3, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fcfc 	bl	8004f40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3301      	adds	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b37      	cmp	r3, #55	; 0x37
 8006552:	d9ef      	bls.n	8006534 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006554:	480d      	ldr	r0, [pc, #52]	; (800658c <prvInitialiseTaskLists+0x64>)
 8006556:	f7fe fcf3 	bl	8004f40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800655a:	480d      	ldr	r0, [pc, #52]	; (8006590 <prvInitialiseTaskLists+0x68>)
 800655c:	f7fe fcf0 	bl	8004f40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006560:	480c      	ldr	r0, [pc, #48]	; (8006594 <prvInitialiseTaskLists+0x6c>)
 8006562:	f7fe fced 	bl	8004f40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006566:	480c      	ldr	r0, [pc, #48]	; (8006598 <prvInitialiseTaskLists+0x70>)
 8006568:	f7fe fcea 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800656c:	480b      	ldr	r0, [pc, #44]	; (800659c <prvInitialiseTaskLists+0x74>)
 800656e:	f7fe fce7 	bl	8004f40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006572:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <prvInitialiseTaskLists+0x78>)
 8006574:	4a05      	ldr	r2, [pc, #20]	; (800658c <prvInitialiseTaskLists+0x64>)
 8006576:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <prvInitialiseTaskLists+0x7c>)
 800657a:	4a05      	ldr	r2, [pc, #20]	; (8006590 <prvInitialiseTaskLists+0x68>)
 800657c:	601a      	str	r2, [r3, #0]
}
 800657e:	bf00      	nop
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200008b4 	.word	0x200008b4
 800658c:	20000d14 	.word	0x20000d14
 8006590:	20000d28 	.word	0x20000d28
 8006594:	20000d44 	.word	0x20000d44
 8006598:	20000d58 	.word	0x20000d58
 800659c:	20000d70 	.word	0x20000d70
 80065a0:	20000d3c 	.word	0x20000d3c
 80065a4:	20000d40 	.word	0x20000d40

080065a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ae:	e019      	b.n	80065e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065b0:	f000 fda0 	bl	80070f4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <prvCheckTasksWaitingTermination+0x50>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fd47 	bl	8005054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <prvCheckTasksWaitingTermination+0x54>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a0b      	ldr	r2, [pc, #44]	; (80065fc <prvCheckTasksWaitingTermination+0x54>)
 80065ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <prvCheckTasksWaitingTermination+0x58>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	4a0a      	ldr	r2, [pc, #40]	; (8006600 <prvCheckTasksWaitingTermination+0x58>)
 80065d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065da:	f000 fdbb 	bl	8007154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f810 	bl	8006604 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <prvCheckTasksWaitingTermination+0x58>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e1      	bne.n	80065b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000d58 	.word	0x20000d58
 80065fc:	20000d84 	.word	0x20000d84
 8006600:	20000d6c 	.word	0x20000d6c

08006604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006612:	2b00      	cmp	r3, #0
 8006614:	d108      	bne.n	8006628 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	4618      	mov	r0, r3
 800661c:	f000 ff50 	bl	80074c0 <vPortFree>
				vPortFree( pxTCB );
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 ff4d 	bl	80074c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006626:	e018      	b.n	800665a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800662e:	2b01      	cmp	r3, #1
 8006630:	d103      	bne.n	800663a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 ff44 	bl	80074c0 <vPortFree>
	}
 8006638:	e00f      	b.n	800665a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006640:	2b02      	cmp	r3, #2
 8006642:	d00a      	beq.n	800665a <prvDeleteTCB+0x56>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <prvDeleteTCB+0x54>
	}
 800665a:	bf00      	nop
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800666a:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <prvResetNextTaskUnblockTime+0x44>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <prvResetNextTaskUnblockTime+0x14>
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <prvResetNextTaskUnblockTime+0x16>
 8006678:	2300      	movs	r3, #0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800667e:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <prvResetNextTaskUnblockTime+0x48>)
 8006680:	f04f 32ff 	mov.w	r2, #4294967295
 8006684:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006686:	e008      	b.n	800669a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006688:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <prvResetNextTaskUnblockTime+0x44>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4a05      	ldr	r2, [pc, #20]	; (80066ac <prvResetNextTaskUnblockTime+0x48>)
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	20000d3c 	.word	0x20000d3c
 80066ac:	20000da4 	.word	0x20000da4

080066b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <xTaskGetSchedulerState+0x34>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066be:	2301      	movs	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	e008      	b.n	80066d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <xTaskGetSchedulerState+0x38>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066cc:	2302      	movs	r3, #2
 80066ce:	607b      	str	r3, [r7, #4]
 80066d0:	e001      	b.n	80066d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066d6:	687b      	ldr	r3, [r7, #4]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	20000d90 	.word	0x20000d90
 80066e8:	20000dac 	.word	0x20000dac

080066ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d056      	beq.n	80067b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006702:	4b2e      	ldr	r3, [pc, #184]	; (80067bc <xTaskPriorityDisinherit+0xd0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d00a      	beq.n	8006722 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60fb      	str	r3, [r7, #12]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	60bb      	str	r3, [r7, #8]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	1e5a      	subs	r2, r3, #1
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006752:	429a      	cmp	r2, r3
 8006754:	d02c      	beq.n	80067b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d128      	bne.n	80067b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fc76 	bl	8005054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <xTaskPriorityDisinherit+0xd4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d903      	bls.n	8006790 <xTaskPriorityDisinherit+0xa4>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4a0c      	ldr	r2, [pc, #48]	; (80067c0 <xTaskPriorityDisinherit+0xd4>)
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4a09      	ldr	r2, [pc, #36]	; (80067c4 <xTaskPriorityDisinherit+0xd8>)
 800679e:	441a      	add	r2, r3
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f7fe fbf7 	bl	8004f9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067ac:	2301      	movs	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067b0:	697b      	ldr	r3, [r7, #20]
	}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200008b0 	.word	0x200008b0
 80067c0:	20000d8c 	.word	0x20000d8c
 80067c4:	200008b4 	.word	0x200008b4

080067c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067d2:	4b21      	ldr	r3, [pc, #132]	; (8006858 <prvAddCurrentTaskToDelayedList+0x90>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d8:	4b20      	ldr	r3, [pc, #128]	; (800685c <prvAddCurrentTaskToDelayedList+0x94>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3304      	adds	r3, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fe fc38 	bl	8005054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d10a      	bne.n	8006802 <prvAddCurrentTaskToDelayedList+0x3a>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d007      	beq.n	8006802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f2:	4b1a      	ldr	r3, [pc, #104]	; (800685c <prvAddCurrentTaskToDelayedList+0x94>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4819      	ldr	r0, [pc, #100]	; (8006860 <prvAddCurrentTaskToDelayedList+0x98>)
 80067fc:	f7fe fbcd 	bl	8004f9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006800:	e026      	b.n	8006850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4413      	add	r3, r2
 8006808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800680a:	4b14      	ldr	r3, [pc, #80]	; (800685c <prvAddCurrentTaskToDelayedList+0x94>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	429a      	cmp	r2, r3
 8006818:	d209      	bcs.n	800682e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <prvAddCurrentTaskToDelayedList+0x9c>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	4b0f      	ldr	r3, [pc, #60]	; (800685c <prvAddCurrentTaskToDelayedList+0x94>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7fe fbdb 	bl	8004fe2 <vListInsert>
}
 800682c:	e010      	b.n	8006850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800682e:	4b0e      	ldr	r3, [pc, #56]	; (8006868 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b0a      	ldr	r3, [pc, #40]	; (800685c <prvAddCurrentTaskToDelayedList+0x94>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7fe fbd1 	bl	8004fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	d202      	bcs.n	8006850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800684a:	4a08      	ldr	r2, [pc, #32]	; (800686c <prvAddCurrentTaskToDelayedList+0xa4>)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6013      	str	r3, [r2, #0]
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000d88 	.word	0x20000d88
 800685c:	200008b0 	.word	0x200008b0
 8006860:	20000d70 	.word	0x20000d70
 8006864:	20000d40 	.word	0x20000d40
 8006868:	20000d3c 	.word	0x20000d3c
 800686c:	20000da4 	.word	0x20000da4

08006870 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	; 0x28
 8006874:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800687a:	f000 facb 	bl	8006e14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800687e:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <xTimerCreateTimerTask+0x80>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d021      	beq.n	80068ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800688e:	1d3a      	adds	r2, r7, #4
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	f107 030c 	add.w	r3, r7, #12
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe fb37 	bl	8004f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	9202      	str	r2, [sp, #8]
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	2302      	movs	r3, #2
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	2300      	movs	r3, #0
 80068ae:	460a      	mov	r2, r1
 80068b0:	4910      	ldr	r1, [pc, #64]	; (80068f4 <xTimerCreateTimerTask+0x84>)
 80068b2:	4811      	ldr	r0, [pc, #68]	; (80068f8 <xTimerCreateTimerTask+0x88>)
 80068b4:	f7ff f8de 	bl	8005a74 <xTaskCreateStatic>
 80068b8:	4603      	mov	r3, r0
 80068ba:	4a10      	ldr	r2, [pc, #64]	; (80068fc <xTimerCreateTimerTask+0x8c>)
 80068bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <xTimerCreateTimerTask+0x8c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068c6:	2301      	movs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	613b      	str	r3, [r7, #16]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80068e6:	697b      	ldr	r3, [r7, #20]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000de0 	.word	0x20000de0
 80068f4:	080077b4 	.word	0x080077b4
 80068f8:	08006a1d 	.word	0x08006a1d
 80068fc:	20000de4 	.word	0x20000de4

08006900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	; 0x28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	623b      	str	r3, [r7, #32]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <xTimerGenericCommand+0x98>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d02a      	beq.n	800698c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b05      	cmp	r3, #5
 8006946:	dc18      	bgt.n	800697a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006948:	f7ff feb2 	bl	80066b0 <xTaskGetSchedulerState>
 800694c:	4603      	mov	r3, r0
 800694e:	2b02      	cmp	r3, #2
 8006950:	d109      	bne.n	8006966 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <xTimerGenericCommand+0x98>)
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f107 0110 	add.w	r1, r7, #16
 800695a:	2300      	movs	r3, #0
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	f7fe fca5 	bl	80052ac <xQueueGenericSend>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24
 8006964:	e012      	b.n	800698c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006966:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <xTimerGenericCommand+0x98>)
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f107 0110 	add.w	r1, r7, #16
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	f7fe fc9b 	bl	80052ac <xQueueGenericSend>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24
 8006978:	e008      	b.n	800698c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <xTimerGenericCommand+0x98>)
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	f107 0110 	add.w	r1, r7, #16
 8006982:	2300      	movs	r3, #0
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	f7fe fd8f 	bl	80054a8 <xQueueGenericSendFromISR>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800698e:	4618      	mov	r0, r3
 8006990:	3728      	adds	r7, #40	; 0x28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20000de0 	.word	0x20000de0

0800699c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069a6:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <prvProcessExpiredTimer+0x7c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fb4d 	bl	8005054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d122      	bne.n	8006a08 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	18d1      	adds	r1, r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	6978      	ldr	r0, [r7, #20]
 80069d0:	f000 f8c8 	bl	8006b64 <prvInsertTimerInActiveList>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069da:	2300      	movs	r3, #0
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	2300      	movs	r3, #0
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	2100      	movs	r1, #0
 80069e4:	6978      	ldr	r0, [r7, #20]
 80069e6:	f7ff ff8b 	bl	8006900 <xTimerGenericCommand>
 80069ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	60fb      	str	r3, [r7, #12]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	6978      	ldr	r0, [r7, #20]
 8006a0e:	4798      	blx	r3
}
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000dd8 	.word	0x20000dd8

08006a1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a24:	f107 0308 	add.w	r3, r7, #8
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f857 	bl	8006adc <prvGetNextExpireTime>
 8006a2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4619      	mov	r1, r3
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f803 	bl	8006a40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a3a:	f000 f8d5 	bl	8006be8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a3e:	e7f1      	b.n	8006a24 <prvTimerTask+0x8>

08006a40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a4a:	f7ff fa45 	bl	8005ed8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a4e:	f107 0308 	add.w	r3, r7, #8
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f866 	bl	8006b24 <prvSampleTimeNow>
 8006a58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d130      	bne.n	8006ac2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10a      	bne.n	8006a7c <prvProcessTimerOrBlockTask+0x3c>
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d806      	bhi.n	8006a7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a6e:	f7ff fa41 	bl	8005ef4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff ff91 	bl	800699c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a7a:	e024      	b.n	8006ac6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a82:	4b13      	ldr	r3, [pc, #76]	; (8006ad0 <prvProcessTimerOrBlockTask+0x90>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a94:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <prvProcessTimerOrBlockTask+0x94>)
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	f7fe ffb3 	bl	8005a0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006aa6:	f7ff fa25 	bl	8005ef4 <xTaskResumeAll>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <prvProcessTimerOrBlockTask+0x98>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
}
 8006ac0:	e001      	b.n	8006ac6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ac2:	f7ff fa17 	bl	8005ef4 <xTaskResumeAll>
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000ddc 	.word	0x20000ddc
 8006ad4:	20000de0 	.word	0x20000de0
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ae4:	4b0e      	ldr	r3, [pc, #56]	; (8006b20 <prvGetNextExpireTime+0x44>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b02:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <prvGetNextExpireTime+0x44>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e001      	b.n	8006b12 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b12:	68fb      	ldr	r3, [r7, #12]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000dd8 	.word	0x20000dd8

08006b24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b2c:	f7ff fa80 	bl	8006030 <xTaskGetTickCount>
 8006b30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <prvSampleTimeNow+0x3c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d205      	bcs.n	8006b48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b3c:	f000 f908 	bl	8006d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e002      	b.n	8006b4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b4e:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <prvSampleTimeNow+0x3c>)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b54:	68fb      	ldr	r3, [r7, #12]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000de8 	.word	0x20000de8

08006b64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d812      	bhi.n	8006bb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e01b      	b.n	8006bd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b9e:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <prvInsertTimerInActiveList+0x7c>)
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4610      	mov	r0, r2
 8006baa:	f7fe fa1a 	bl	8004fe2 <vListInsert>
 8006bae:	e012      	b.n	8006bd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d206      	bcs.n	8006bc6 <prvInsertTimerInActiveList+0x62>
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e007      	b.n	8006bd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <prvInsertTimerInActiveList+0x80>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	f7fe fa06 	bl	8004fe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bd6:	697b      	ldr	r3, [r7, #20]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000ddc 	.word	0x20000ddc
 8006be4:	20000dd8 	.word	0x20000dd8

08006be8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bee:	e09d      	b.n	8006d2c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da18      	bge.n	8006c28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	61fb      	str	r3, [r7, #28]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1e:	6850      	ldr	r0, [r2, #4]
 8006c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c22:	6892      	ldr	r2, [r2, #8]
 8006c24:	4611      	mov	r1, r2
 8006c26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	db7d      	blt.n	8006d2a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fa08 	bl	8005054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c44:	463b      	mov	r3, r7
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff ff6c 	bl	8006b24 <prvSampleTimeNow>
 8006c4c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b09      	cmp	r3, #9
 8006c52:	d86b      	bhi.n	8006d2c <prvProcessReceivedCommands+0x144>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <prvProcessReceivedCommands+0x74>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c85 	.word	0x08006c85
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006c85 	.word	0x08006c85
 8006c68:	08006d2d 	.word	0x08006d2d
 8006c6c:	08006ce1 	.word	0x08006ce1
 8006c70:	08006d19 	.word	0x08006d19
 8006c74:	08006c85 	.word	0x08006c85
 8006c78:	08006c85 	.word	0x08006c85
 8006c7c:	08006d2d 	.word	0x08006d2d
 8006c80:	08006ce1 	.word	0x08006ce1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	18d1      	adds	r1, r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c92:	f7ff ff67 	bl	8006b64 <prvInsertTimerInActiveList>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d047      	beq.n	8006d2c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d13f      	bne.n	8006d2c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	441a      	add	r2, r3
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2100      	movs	r1, #0
 8006cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbe:	f7ff fe1f 	bl	8006900 <xTimerGenericCommand>
 8006cc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d130      	bne.n	8006d2c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	61bb      	str	r3, [r7, #24]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	617b      	str	r3, [r7, #20]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	18d1      	adds	r1, r2, r3
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d12:	f7ff ff27 	bl	8006b64 <prvInsertTimerInActiveList>
					break;
 8006d16:	e009      	b.n	8006d2c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d24:	f000 fbcc 	bl	80074c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d28:	e000      	b.n	8006d2c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d2c:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <prvProcessReceivedCommands+0x164>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	1d39      	adds	r1, r7, #4
 8006d32:	2200      	movs	r2, #0
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fe fc4f 	bl	80055d8 <xQueueReceive>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f47f af57 	bne.w	8006bf0 <prvProcessReceivedCommands+0x8>
	}
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	3730      	adds	r7, #48	; 0x30
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20000de0 	.word	0x20000de0

08006d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d56:	e045      	b.n	8006de4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d58:	4b2c      	ldr	r3, [pc, #176]	; (8006e0c <prvSwitchTimerLists+0xbc>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d62:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <prvSwitchTimerLists+0xbc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe f96f 	bl	8005054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d12e      	bne.n	8006de4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d90e      	bls.n	8006db6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006da4:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <prvSwitchTimerLists+0xbc>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7fe f917 	bl	8004fe2 <vListInsert>
 8006db4:	e016      	b.n	8006de4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006db6:	2300      	movs	r3, #0
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7ff fd9d 	bl	8006900 <xTimerGenericCommand>
 8006dc6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006de4:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <prvSwitchTimerLists+0xbc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1b4      	bne.n	8006d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <prvSwitchTimerLists+0xbc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006df4:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <prvSwitchTimerLists+0xc0>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <prvSwitchTimerLists+0xbc>)
 8006dfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006dfc:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <prvSwitchTimerLists+0xc0>)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6013      	str	r3, [r2, #0]
}
 8006e02:	bf00      	nop
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000dd8 	.word	0x20000dd8
 8006e10:	20000ddc 	.word	0x20000ddc

08006e14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e1a:	f000 f96b 	bl	80070f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e1e:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d120      	bne.n	8006e68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e26:	4814      	ldr	r0, [pc, #80]	; (8006e78 <prvCheckForValidListAndQueue+0x64>)
 8006e28:	f7fe f88a 	bl	8004f40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e2c:	4813      	ldr	r0, [pc, #76]	; (8006e7c <prvCheckForValidListAndQueue+0x68>)
 8006e2e:	f7fe f887 	bl	8004f40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e32:	4b13      	ldr	r3, [pc, #76]	; (8006e80 <prvCheckForValidListAndQueue+0x6c>)
 8006e34:	4a10      	ldr	r2, [pc, #64]	; (8006e78 <prvCheckForValidListAndQueue+0x64>)
 8006e36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e38:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <prvCheckForValidListAndQueue+0x70>)
 8006e3a:	4a10      	ldr	r2, [pc, #64]	; (8006e7c <prvCheckForValidListAndQueue+0x68>)
 8006e3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <prvCheckForValidListAndQueue+0x74>)
 8006e44:	4a11      	ldr	r2, [pc, #68]	; (8006e8c <prvCheckForValidListAndQueue+0x78>)
 8006e46:	2110      	movs	r1, #16
 8006e48:	200a      	movs	r0, #10
 8006e4a:	f7fe f995 	bl	8005178 <xQueueGenericCreateStatic>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <prvCheckForValidListAndQueue+0x60>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	490b      	ldr	r1, [pc, #44]	; (8006e90 <prvCheckForValidListAndQueue+0x7c>)
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe fda8 	bl	80059b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e68:	f000 f974 	bl	8007154 <vPortExitCritical>
}
 8006e6c:	bf00      	nop
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000de0 	.word	0x20000de0
 8006e78:	20000db0 	.word	0x20000db0
 8006e7c:	20000dc4 	.word	0x20000dc4
 8006e80:	20000dd8 	.word	0x20000dd8
 8006e84:	20000ddc 	.word	0x20000ddc
 8006e88:	20000e8c 	.word	0x20000e8c
 8006e8c:	20000dec 	.word	0x20000dec
 8006e90:	080077bc 	.word	0x080077bc

08006e94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3b04      	subs	r3, #4
 8006ea4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f023 0201 	bic.w	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3b04      	subs	r3, #4
 8006ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ec4:	4a0c      	ldr	r2, [pc, #48]	; (8006ef8 <pxPortInitialiseStack+0x64>)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b14      	subs	r3, #20
 8006ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f06f 0202 	mvn.w	r2, #2
 8006ee2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3b20      	subs	r3, #32
 8006ee8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006eea:	68fb      	ldr	r3, [r7, #12]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	08006efd 	.word	0x08006efd

08006efc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <prvTaskExitError+0x54>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0e:	d00a      	beq.n	8006f26 <prvTaskExitError+0x2a>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <prvTaskExitError+0x28>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	60bb      	str	r3, [r7, #8]
}
 8006f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f3a:	bf00      	nop
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0fc      	beq.n	8006f3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	2000000c 	.word	0x2000000c
	...

08006f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <pxCurrentTCBConst2>)
 8006f62:	6819      	ldr	r1, [r3, #0]
 8006f64:	6808      	ldr	r0, [r1, #0]
 8006f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	f380 8809 	msr	PSP, r0
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f04f 0000 	mov.w	r0, #0
 8006f76:	f380 8811 	msr	BASEPRI, r0
 8006f7a:	4770      	bx	lr
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst2>:
 8006f80:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f88:	4808      	ldr	r0, [pc, #32]	; (8006fac <prvPortStartFirstTask+0x24>)
 8006f8a:	6800      	ldr	r0, [r0, #0]
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f380 8808 	msr	MSP, r0
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8814 	msr	CONTROL, r0
 8006f9a:	b662      	cpsie	i
 8006f9c:	b661      	cpsie	f
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	df00      	svc	0
 8006fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006faa:	bf00      	nop
 8006fac:	e000ed08 	.word	0xe000ed08

08006fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fb6:	4b46      	ldr	r3, [pc, #280]	; (80070d0 <xPortStartScheduler+0x120>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a46      	ldr	r2, [pc, #280]	; (80070d4 <xPortStartScheduler+0x124>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d10a      	bne.n	8006fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	613b      	str	r3, [r7, #16]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fd6:	4b3e      	ldr	r3, [pc, #248]	; (80070d0 <xPortStartScheduler+0x120>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a3f      	ldr	r2, [pc, #252]	; (80070d8 <xPortStartScheduler+0x128>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10a      	bne.n	8006ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ff6:	4b39      	ldr	r3, [pc, #228]	; (80070dc <xPortStartScheduler+0x12c>)
 8006ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	22ff      	movs	r2, #255	; 0xff
 8007006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007018:	b2da      	uxtb	r2, r3
 800701a:	4b31      	ldr	r3, [pc, #196]	; (80070e0 <xPortStartScheduler+0x130>)
 800701c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800701e:	4b31      	ldr	r3, [pc, #196]	; (80070e4 <xPortStartScheduler+0x134>)
 8007020:	2207      	movs	r2, #7
 8007022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007024:	e009      	b.n	800703a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007026:	4b2f      	ldr	r3, [pc, #188]	; (80070e4 <xPortStartScheduler+0x134>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3b01      	subs	r3, #1
 800702c:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <xPortStartScheduler+0x134>)
 800702e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007042:	2b80      	cmp	r3, #128	; 0x80
 8007044:	d0ef      	beq.n	8007026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007046:	4b27      	ldr	r3, [pc, #156]	; (80070e4 <xPortStartScheduler+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f1c3 0307 	rsb	r3, r3, #7
 800704e:	2b04      	cmp	r3, #4
 8007050:	d00a      	beq.n	8007068 <xPortStartScheduler+0xb8>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60bb      	str	r3, [r7, #8]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007068:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <xPortStartScheduler+0x134>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <xPortStartScheduler+0x134>)
 8007070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007072:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <xPortStartScheduler+0x134>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800707a:	4a1a      	ldr	r2, [pc, #104]	; (80070e4 <xPortStartScheduler+0x134>)
 800707c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007086:	4b18      	ldr	r3, [pc, #96]	; (80070e8 <xPortStartScheduler+0x138>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a17      	ldr	r2, [pc, #92]	; (80070e8 <xPortStartScheduler+0x138>)
 800708c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <xPortStartScheduler+0x138>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <xPortStartScheduler+0x138>)
 8007098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800709c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800709e:	f000 f8dd 	bl	800725c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070a2:	4b12      	ldr	r3, [pc, #72]	; (80070ec <xPortStartScheduler+0x13c>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070a8:	f000 f8fc 	bl	80072a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <xPortStartScheduler+0x140>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a0f      	ldr	r2, [pc, #60]	; (80070f0 <xPortStartScheduler+0x140>)
 80070b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070b8:	f7ff ff66 	bl	8006f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070bc:	f7ff f886 	bl	80061cc <vTaskSwitchContext>
	prvTaskExitError();
 80070c0:	f7ff ff1c 	bl	8006efc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	e000ed00 	.word	0xe000ed00
 80070d4:	410fc271 	.word	0x410fc271
 80070d8:	410fc270 	.word	0x410fc270
 80070dc:	e000e400 	.word	0xe000e400
 80070e0:	20000edc 	.word	0x20000edc
 80070e4:	20000ee0 	.word	0x20000ee0
 80070e8:	e000ed20 	.word	0xe000ed20
 80070ec:	2000000c 	.word	0x2000000c
 80070f0:	e000ef34 	.word	0xe000ef34

080070f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	607b      	str	r3, [r7, #4]
}
 800710c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <vPortEnterCritical+0x58>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3301      	adds	r3, #1
 8007114:	4a0d      	ldr	r2, [pc, #52]	; (800714c <vPortEnterCritical+0x58>)
 8007116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007118:	4b0c      	ldr	r3, [pc, #48]	; (800714c <vPortEnterCritical+0x58>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d10f      	bne.n	8007140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007120:	4b0b      	ldr	r3, [pc, #44]	; (8007150 <vPortEnterCritical+0x5c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <vPortEnterCritical+0x4c>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	603b      	str	r3, [r7, #0]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <vPortEnterCritical+0x4a>
	}
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	2000000c 	.word	0x2000000c
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800715a:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <vPortExitCritical+0x50>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <vPortExitCritical+0x24>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	607b      	str	r3, [r7, #4]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <vPortExitCritical+0x50>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	4a09      	ldr	r2, [pc, #36]	; (80071a4 <vPortExitCritical+0x50>)
 8007180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <vPortExitCritical+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <vPortExitCritical+0x42>
 800718a:	2300      	movs	r3, #0
 800718c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	f383 8811 	msr	BASEPRI, r3
}
 8007194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	2000000c 	.word	0x2000000c
	...

080071b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071b0:	f3ef 8009 	mrs	r0, PSP
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4b15      	ldr	r3, [pc, #84]	; (8007210 <pxCurrentTCBConst>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	f01e 0f10 	tst.w	lr, #16
 80071c0:	bf08      	it	eq
 80071c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	6010      	str	r0, [r2, #0]
 80071cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071d4:	f380 8811 	msr	BASEPRI, r0
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f7fe fff4 	bl	80061cc <vTaskSwitchContext>
 80071e4:	f04f 0000 	mov.w	r0, #0
 80071e8:	f380 8811 	msr	BASEPRI, r0
 80071ec:	bc09      	pop	{r0, r3}
 80071ee:	6819      	ldr	r1, [r3, #0]
 80071f0:	6808      	ldr	r0, [r1, #0]
 80071f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f6:	f01e 0f10 	tst.w	lr, #16
 80071fa:	bf08      	it	eq
 80071fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007200:	f380 8809 	msr	PSP, r0
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	f3af 8000 	nop.w

08007210 <pxCurrentTCBConst>:
 8007210:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop

08007218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007232:	f7fe ff0d 	bl	8006050 <xTaskIncrementTick>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <xPortSysTickHandler+0x40>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	2300      	movs	r3, #0
 8007246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f383 8811 	msr	BASEPRI, r3
}
 800724e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800725c:	b480      	push	{r7}
 800725e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <vPortSetupTimerInterrupt+0x34>)
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <vPortSetupTimerInterrupt+0x38>)
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800726c:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <vPortSetupTimerInterrupt+0x3c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a0a      	ldr	r2, [pc, #40]	; (800729c <vPortSetupTimerInterrupt+0x40>)
 8007272:	fba2 2303 	umull	r2, r3, r2, r3
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <vPortSetupTimerInterrupt+0x44>)
 800727a:	3b01      	subs	r3, #1
 800727c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800727e:	4b04      	ldr	r3, [pc, #16]	; (8007290 <vPortSetupTimerInterrupt+0x34>)
 8007280:	2207      	movs	r2, #7
 8007282:	601a      	str	r2, [r3, #0]
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	e000e010 	.word	0xe000e010
 8007294:	e000e018 	.word	0xe000e018
 8007298:	20000000 	.word	0x20000000
 800729c:	10624dd3 	.word	0x10624dd3
 80072a0:	e000e014 	.word	0xe000e014

080072a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072b4 <vPortEnableVFP+0x10>
 80072a8:	6801      	ldr	r1, [r0, #0]
 80072aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ae:	6001      	str	r1, [r0, #0]
 80072b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072b2:	bf00      	nop
 80072b4:	e000ed88 	.word	0xe000ed88

080072b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072be:	f3ef 8305 	mrs	r3, IPSR
 80072c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b0f      	cmp	r3, #15
 80072c8:	d914      	bls.n	80072f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <vPortValidateInterruptPriority+0x70>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072d4:	4b15      	ldr	r3, [pc, #84]	; (800732c <vPortValidateInterruptPriority+0x74>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	7afa      	ldrb	r2, [r7, #11]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d20a      	bcs.n	80072f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	607b      	str	r3, [r7, #4]
}
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <vPortValidateInterruptPriority+0x78>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <vPortValidateInterruptPriority+0x7c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d90a      	bls.n	800731a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	603b      	str	r3, [r7, #0]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <vPortValidateInterruptPriority+0x60>
	}
 800731a:	bf00      	nop
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	e000e3f0 	.word	0xe000e3f0
 800732c:	20000edc 	.word	0x20000edc
 8007330:	e000ed0c 	.word	0xe000ed0c
 8007334:	20000ee0 	.word	0x20000ee0

08007338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08a      	sub	sp, #40	; 0x28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007340:	2300      	movs	r3, #0
 8007342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007344:	f7fe fdc8 	bl	8005ed8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007348:	4b58      	ldr	r3, [pc, #352]	; (80074ac <pvPortMalloc+0x174>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007350:	f000 f910 	bl	8007574 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007354:	4b56      	ldr	r3, [pc, #344]	; (80074b0 <pvPortMalloc+0x178>)
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4013      	ands	r3, r2
 800735c:	2b00      	cmp	r3, #0
 800735e:	f040 808e 	bne.w	800747e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01d      	beq.n	80073a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007368:	2208      	movs	r2, #8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	2b00      	cmp	r3, #0
 8007378:	d014      	beq.n	80073a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f023 0307 	bic.w	r3, r3, #7
 8007380:	3308      	adds	r3, #8
 8007382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <pvPortMalloc+0x6c>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	617b      	str	r3, [r7, #20]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d069      	beq.n	800747e <pvPortMalloc+0x146>
 80073aa:	4b42      	ldr	r3, [pc, #264]	; (80074b4 <pvPortMalloc+0x17c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d864      	bhi.n	800747e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073b4:	4b40      	ldr	r3, [pc, #256]	; (80074b8 <pvPortMalloc+0x180>)
 80073b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073b8:	4b3f      	ldr	r3, [pc, #252]	; (80074b8 <pvPortMalloc+0x180>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073be:	e004      	b.n	80073ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d903      	bls.n	80073dc <pvPortMalloc+0xa4>
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f1      	bne.n	80073c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073dc:	4b33      	ldr	r3, [pc, #204]	; (80074ac <pvPortMalloc+0x174>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d04b      	beq.n	800747e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2208      	movs	r2, #8
 80073ec:	4413      	add	r3, r2
 80073ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	2308      	movs	r3, #8
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	429a      	cmp	r2, r3
 8007406:	d91f      	bls.n	8007448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <pvPortMalloc+0xf8>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	613b      	str	r3, [r7, #16]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007442:	69b8      	ldr	r0, [r7, #24]
 8007444:	f000 f8f8 	bl	8007638 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007448:	4b1a      	ldr	r3, [pc, #104]	; (80074b4 <pvPortMalloc+0x17c>)
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	4a18      	ldr	r2, [pc, #96]	; (80074b4 <pvPortMalloc+0x17c>)
 8007454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007456:	4b17      	ldr	r3, [pc, #92]	; (80074b4 <pvPortMalloc+0x17c>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b18      	ldr	r3, [pc, #96]	; (80074bc <pvPortMalloc+0x184>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d203      	bcs.n	800746a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007462:	4b14      	ldr	r3, [pc, #80]	; (80074b4 <pvPortMalloc+0x17c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a15      	ldr	r2, [pc, #84]	; (80074bc <pvPortMalloc+0x184>)
 8007468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	4b10      	ldr	r3, [pc, #64]	; (80074b0 <pvPortMalloc+0x178>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	431a      	orrs	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800747e:	f7fe fd39 	bl	8005ef4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <pvPortMalloc+0x16a>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60fb      	str	r3, [r7, #12]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <pvPortMalloc+0x168>
	return pvReturn;
 80074a2:	69fb      	ldr	r3, [r7, #28]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	; 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20001aec 	.word	0x20001aec
 80074b0:	20001af8 	.word	0x20001af8
 80074b4:	20001af0 	.word	0x20001af0
 80074b8:	20001ae4 	.word	0x20001ae4
 80074bc:	20001af4 	.word	0x20001af4

080074c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d048      	beq.n	8007564 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074d2:	2308      	movs	r3, #8
 80074d4:	425b      	negs	r3, r3
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4413      	add	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	4b21      	ldr	r3, [pc, #132]	; (800756c <vPortFree+0xac>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4013      	ands	r3, r2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <vPortFree+0x44>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	60fb      	str	r3, [r7, #12]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <vPortFree+0x62>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	60bb      	str	r3, [r7, #8]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <vPortFree+0xac>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d019      	beq.n	8007564 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d115      	bne.n	8007564 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <vPortFree+0xac>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	43db      	mvns	r3, r3
 8007542:	401a      	ands	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007548:	f7fe fcc6 	bl	8005ed8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <vPortFree+0xb0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4413      	add	r3, r2
 8007556:	4a06      	ldr	r2, [pc, #24]	; (8007570 <vPortFree+0xb0>)
 8007558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800755a:	6938      	ldr	r0, [r7, #16]
 800755c:	f000 f86c 	bl	8007638 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007560:	f7fe fcc8 	bl	8005ef4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007564:	bf00      	nop
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20001af8 	.word	0x20001af8
 8007570:	20001af0 	.word	0x20001af0

08007574 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800757a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800757e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007580:	4b27      	ldr	r3, [pc, #156]	; (8007620 <prvHeapInit+0xac>)
 8007582:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	4a1f      	ldr	r2, [pc, #124]	; (8007620 <prvHeapInit+0xac>)
 80075a4:	4413      	add	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ac:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <prvHeapInit+0xb0>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <prvHeapInit+0xb0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075c0:	2208      	movs	r2, #8
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0307 	bic.w	r3, r3, #7
 80075ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a15      	ldr	r2, [pc, #84]	; (8007628 <prvHeapInit+0xb4>)
 80075d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <prvHeapInit+0xb4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075de:	4b12      	ldr	r3, [pc, #72]	; (8007628 <prvHeapInit+0xb4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <prvHeapInit+0xb4>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <prvHeapInit+0xb8>)
 8007602:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	4a09      	ldr	r2, [pc, #36]	; (8007630 <prvHeapInit+0xbc>)
 800760a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800760c:	4b09      	ldr	r3, [pc, #36]	; (8007634 <prvHeapInit+0xc0>)
 800760e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	bf00      	nop
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	20000ee4 	.word	0x20000ee4
 8007624:	20001ae4 	.word	0x20001ae4
 8007628:	20001aec 	.word	0x20001aec
 800762c:	20001af4 	.word	0x20001af4
 8007630:	20001af0 	.word	0x20001af0
 8007634:	20001af8 	.word	0x20001af8

08007638 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007640:	4b28      	ldr	r3, [pc, #160]	; (80076e4 <prvInsertBlockIntoFreeList+0xac>)
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e002      	b.n	800764c <prvInsertBlockIntoFreeList+0x14>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d8f7      	bhi.n	8007646 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	4413      	add	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d108      	bne.n	800767a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d118      	bne.n	80076c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	4b15      	ldr	r3, [pc, #84]	; (80076e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d00d      	beq.n	80076b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	441a      	add	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e008      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <prvInsertBlockIntoFreeList+0xb0>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	e003      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d002      	beq.n	80076d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20001ae4 	.word	0x20001ae4
 80076e8:	20001aec 	.word	0x20001aec

080076ec <__libc_init_array>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	4d0d      	ldr	r5, [pc, #52]	; (8007724 <__libc_init_array+0x38>)
 80076f0:	4c0d      	ldr	r4, [pc, #52]	; (8007728 <__libc_init_array+0x3c>)
 80076f2:	1b64      	subs	r4, r4, r5
 80076f4:	10a4      	asrs	r4, r4, #2
 80076f6:	2600      	movs	r6, #0
 80076f8:	42a6      	cmp	r6, r4
 80076fa:	d109      	bne.n	8007710 <__libc_init_array+0x24>
 80076fc:	4d0b      	ldr	r5, [pc, #44]	; (800772c <__libc_init_array+0x40>)
 80076fe:	4c0c      	ldr	r4, [pc, #48]	; (8007730 <__libc_init_array+0x44>)
 8007700:	f000 f82e 	bl	8007760 <_init>
 8007704:	1b64      	subs	r4, r4, r5
 8007706:	10a4      	asrs	r4, r4, #2
 8007708:	2600      	movs	r6, #0
 800770a:	42a6      	cmp	r6, r4
 800770c:	d105      	bne.n	800771a <__libc_init_array+0x2e>
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	f855 3b04 	ldr.w	r3, [r5], #4
 8007714:	4798      	blx	r3
 8007716:	3601      	adds	r6, #1
 8007718:	e7ee      	b.n	80076f8 <__libc_init_array+0xc>
 800771a:	f855 3b04 	ldr.w	r3, [r5], #4
 800771e:	4798      	blx	r3
 8007720:	3601      	adds	r6, #1
 8007722:	e7f2      	b.n	800770a <__libc_init_array+0x1e>
 8007724:	0800788c 	.word	0x0800788c
 8007728:	0800788c 	.word	0x0800788c
 800772c:	0800788c 	.word	0x0800788c
 8007730:	08007890 	.word	0x08007890

08007734 <memcpy>:
 8007734:	440a      	add	r2, r1
 8007736:	4291      	cmp	r1, r2
 8007738:	f100 33ff 	add.w	r3, r0, #4294967295
 800773c:	d100      	bne.n	8007740 <memcpy+0xc>
 800773e:	4770      	bx	lr
 8007740:	b510      	push	{r4, lr}
 8007742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800774a:	4291      	cmp	r1, r2
 800774c:	d1f9      	bne.n	8007742 <memcpy+0xe>
 800774e:	bd10      	pop	{r4, pc}

08007750 <memset>:
 8007750:	4402      	add	r2, r0
 8007752:	4603      	mov	r3, r0
 8007754:	4293      	cmp	r3, r2
 8007756:	d100      	bne.n	800775a <memset+0xa>
 8007758:	4770      	bx	lr
 800775a:	f803 1b01 	strb.w	r1, [r3], #1
 800775e:	e7f9      	b.n	8007754 <memset+0x4>

08007760 <_init>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr

0800776c <_fini>:
 800776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776e:	bf00      	nop
 8007770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007772:	bc08      	pop	{r3}
 8007774:	469e      	mov	lr, r3
 8007776:	4770      	bx	lr
